// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aisaaccommand.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_aisaaccommand_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_aisaaccommand_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_aisaaccommand_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_aisaaccommand_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_aisaaccommand_2eproto;
namespace aisaacpb {
class Acceleration;
class AccelerationDefaultTypeInternal;
extern AccelerationDefaultTypeInternal _Acceleration_default_instance_;
class Dribble;
class DribbleDefaultTypeInternal;
extern DribbleDefaultTypeInternal _Dribble_default_instance_;
class Kick;
class KickDefaultTypeInternal;
extern KickDefaultTypeInternal _Kick_default_instance_;
class Obstacle;
class ObstacleDefaultTypeInternal;
extern ObstacleDefaultTypeInternal _Obstacle_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class RaspiCommand;
class RaspiCommandDefaultTypeInternal;
extern RaspiCommandDefaultTypeInternal _RaspiCommand_default_instance_;
class SpcCommand;
class SpcCommandDefaultTypeInternal;
extern SpcCommandDefaultTypeInternal _SpcCommand_default_instance_;
class Velocity;
class VelocityDefaultTypeInternal;
extern VelocityDefaultTypeInternal _Velocity_default_instance_;
class VisionData;
class VisionDataDefaultTypeInternal;
extern VisionDataDefaultTypeInternal _VisionData_default_instance_;
}  // namespace aisaacpb
PROTOBUF_NAMESPACE_OPEN
template<> ::aisaacpb::Acceleration* Arena::CreateMaybeMessage<::aisaacpb::Acceleration>(Arena*);
template<> ::aisaacpb::Dribble* Arena::CreateMaybeMessage<::aisaacpb::Dribble>(Arena*);
template<> ::aisaacpb::Kick* Arena::CreateMaybeMessage<::aisaacpb::Kick>(Arena*);
template<> ::aisaacpb::Obstacle* Arena::CreateMaybeMessage<::aisaacpb::Obstacle>(Arena*);
template<> ::aisaacpb::Position* Arena::CreateMaybeMessage<::aisaacpb::Position>(Arena*);
template<> ::aisaacpb::RaspiCommand* Arena::CreateMaybeMessage<::aisaacpb::RaspiCommand>(Arena*);
template<> ::aisaacpb::SpcCommand* Arena::CreateMaybeMessage<::aisaacpb::SpcCommand>(Arena*);
template<> ::aisaacpb::Velocity* Arena::CreateMaybeMessage<::aisaacpb::Velocity>(Arena*);
template<> ::aisaacpb::VisionData* Arena::CreateMaybeMessage<::aisaacpb::VisionData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace aisaacpb {

enum Kick_KickType : int {
  Kick_KickType_None = 0,
  Kick_KickType_Force = 1,
  Kick_KickType_Sensor = 2,
  Kick_KickType_XY = 3,
  Kick_KickType_Kick_KickType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Kick_KickType_Kick_KickType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Kick_KickType_IsValid(int value);
constexpr Kick_KickType Kick_KickType_KickType_MIN = Kick_KickType_None;
constexpr Kick_KickType Kick_KickType_KickType_MAX = Kick_KickType_XY;
constexpr int Kick_KickType_KickType_ARRAYSIZE = Kick_KickType_KickType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Kick_KickType_descriptor();
template<typename T>
inline const std::string& Kick_KickType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Kick_KickType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Kick_KickType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Kick_KickType_descriptor(), enum_t_value);
}
inline bool Kick_KickType_Parse(
    const std::string& name, Kick_KickType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Kick_KickType>(
    Kick_KickType_descriptor(), name, value);
}
enum Kick_KickMethod : int {
  Kick_KickMethod_Chip = 0,
  Kick_KickMethod_Straight = 1,
  Kick_KickMethod_Kick_KickMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Kick_KickMethod_Kick_KickMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Kick_KickMethod_IsValid(int value);
constexpr Kick_KickMethod Kick_KickMethod_KickMethod_MIN = Kick_KickMethod_Chip;
constexpr Kick_KickMethod Kick_KickMethod_KickMethod_MAX = Kick_KickMethod_Straight;
constexpr int Kick_KickMethod_KickMethod_ARRAYSIZE = Kick_KickMethod_KickMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Kick_KickMethod_descriptor();
template<typename T>
inline const std::string& Kick_KickMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Kick_KickMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Kick_KickMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Kick_KickMethod_descriptor(), enum_t_value);
}
inline bool Kick_KickMethod_Parse(
    const std::string& name, Kick_KickMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Kick_KickMethod>(
    Kick_KickMethod_descriptor(), name, value);
}
enum RobotCommandCoordinateSystemType : int {
  Vector = 0,
  Coordinate = 1,
  Relax = 2,
  RobotCommandCoordinateSystemType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  RobotCommandCoordinateSystemType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool RobotCommandCoordinateSystemType_IsValid(int value);
constexpr RobotCommandCoordinateSystemType RobotCommandCoordinateSystemType_MIN = Vector;
constexpr RobotCommandCoordinateSystemType RobotCommandCoordinateSystemType_MAX = Relax;
constexpr int RobotCommandCoordinateSystemType_ARRAYSIZE = RobotCommandCoordinateSystemType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotCommandCoordinateSystemType_descriptor();
template<typename T>
inline const std::string& RobotCommandCoordinateSystemType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RobotCommandCoordinateSystemType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RobotCommandCoordinateSystemType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RobotCommandCoordinateSystemType_descriptor(), enum_t_value);
}
inline bool RobotCommandCoordinateSystemType_Parse(
    const std::string& name, RobotCommandCoordinateSystemType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RobotCommandCoordinateSystemType>(
    RobotCommandCoordinateSystemType_descriptor(), name, value);
}
// ===================================================================

class Position PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aisaacpb.Position) */ {
 public:
  inline Position() : Position(nullptr) {};
  virtual ~Position();

  Position(const Position& from);
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aisaacpb.Position";
  }
  protected:
  explicit Position(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_aisaaccommand_2eproto);
    return ::descriptor_table_aisaaccommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kThetaFieldNumber = 3,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 theta = 3;
  void clear_theta();
  ::PROTOBUF_NAMESPACE_ID::int32 theta() const;
  void set_theta(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_theta() const;
  void _internal_set_theta(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:aisaacpb.Position)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 theta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aisaaccommand_2eproto;
};
// -------------------------------------------------------------------

class Velocity PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aisaacpb.Velocity) */ {
 public:
  inline Velocity() : Velocity(nullptr) {};
  virtual ~Velocity();

  Velocity(const Velocity& from);
  Velocity(Velocity&& from) noexcept
    : Velocity() {
    *this = ::std::move(from);
  }

  inline Velocity& operator=(const Velocity& from) {
    CopyFrom(from);
    return *this;
  }
  inline Velocity& operator=(Velocity&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Velocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Velocity* internal_default_instance() {
    return reinterpret_cast<const Velocity*>(
               &_Velocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Velocity& a, Velocity& b) {
    a.Swap(&b);
  }
  inline void Swap(Velocity* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Velocity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Velocity* New() const final {
    return CreateMaybeMessage<Velocity>(nullptr);
  }

  Velocity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Velocity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Velocity& from);
  void MergeFrom(const Velocity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Velocity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aisaacpb.Velocity";
  }
  protected:
  explicit Velocity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_aisaaccommand_2eproto);
    return ::descriptor_table_aisaaccommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVxFieldNumber = 1,
    kVyFieldNumber = 2,
    kOmegaFieldNumber = 3,
  };
  // int32 vx = 1;
  void clear_vx();
  ::PROTOBUF_NAMESPACE_ID::int32 vx() const;
  void set_vx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vx() const;
  void _internal_set_vx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vy = 2;
  void clear_vy();
  ::PROTOBUF_NAMESPACE_ID::int32 vy() const;
  void set_vy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vy() const;
  void _internal_set_vy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 omega = 3;
  void clear_omega();
  ::PROTOBUF_NAMESPACE_ID::int32 omega() const;
  void set_omega(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_omega() const;
  void _internal_set_omega(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:aisaacpb.Velocity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 vx_;
  ::PROTOBUF_NAMESPACE_ID::int32 vy_;
  ::PROTOBUF_NAMESPACE_ID::int32 omega_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aisaaccommand_2eproto;
};
// -------------------------------------------------------------------

class Acceleration PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aisaacpb.Acceleration) */ {
 public:
  inline Acceleration() : Acceleration(nullptr) {};
  virtual ~Acceleration();

  Acceleration(const Acceleration& from);
  Acceleration(Acceleration&& from) noexcept
    : Acceleration() {
    *this = ::std::move(from);
  }

  inline Acceleration& operator=(const Acceleration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Acceleration& operator=(Acceleration&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Acceleration& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Acceleration* internal_default_instance() {
    return reinterpret_cast<const Acceleration*>(
               &_Acceleration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Acceleration& a, Acceleration& b) {
    a.Swap(&b);
  }
  inline void Swap(Acceleration* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Acceleration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Acceleration* New() const final {
    return CreateMaybeMessage<Acceleration>(nullptr);
  }

  Acceleration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Acceleration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Acceleration& from);
  void MergeFrom(const Acceleration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Acceleration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aisaacpb.Acceleration";
  }
  protected:
  explicit Acceleration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_aisaaccommand_2eproto);
    return ::descriptor_table_aisaaccommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxFieldNumber = 1,
    kAyFieldNumber = 2,
  };
  // int32 ax = 1;
  void clear_ax();
  ::PROTOBUF_NAMESPACE_ID::int32 ax() const;
  void set_ax(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ax() const;
  void _internal_set_ax(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ay = 2;
  void clear_ay();
  ::PROTOBUF_NAMESPACE_ID::int32 ay() const;
  void set_ay(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ay() const;
  void _internal_set_ay(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:aisaacpb.Acceleration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 ax_;
  ::PROTOBUF_NAMESPACE_ID::int32 ay_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aisaaccommand_2eproto;
};
// -------------------------------------------------------------------

class Obstacle PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aisaacpb.Obstacle) */ {
 public:
  inline Obstacle() : Obstacle(nullptr) {};
  virtual ~Obstacle();

  Obstacle(const Obstacle& from);
  Obstacle(Obstacle&& from) noexcept
    : Obstacle() {
    *this = ::std::move(from);
  }

  inline Obstacle& operator=(const Obstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Obstacle& operator=(Obstacle&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Obstacle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Obstacle* internal_default_instance() {
    return reinterpret_cast<const Obstacle*>(
               &_Obstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Obstacle& a, Obstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(Obstacle* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Obstacle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Obstacle* New() const final {
    return CreateMaybeMessage<Obstacle>(nullptr);
  }

  Obstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Obstacle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Obstacle& from);
  void MergeFrom(const Obstacle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Obstacle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aisaacpb.Obstacle";
  }
  protected:
  explicit Obstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_aisaaccommand_2eproto);
    return ::descriptor_table_aisaaccommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kThetaFieldNumber = 3,
    kVxFieldNumber = 4,
    kVyFieldNumber = 5,
  };
  // int32 x = 1;
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::int32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y = 2;
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::int32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 theta = 3;
  void clear_theta();
  ::PROTOBUF_NAMESPACE_ID::int32 theta() const;
  void set_theta(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_theta() const;
  void _internal_set_theta(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vx = 4;
  void clear_vx();
  ::PROTOBUF_NAMESPACE_ID::int32 vx() const;
  void set_vx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vx() const;
  void _internal_set_vx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 vy = 5;
  void clear_vy();
  ::PROTOBUF_NAMESPACE_ID::int32 vy() const;
  void set_vy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vy() const;
  void _internal_set_vy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:aisaacpb.Obstacle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 x_;
  ::PROTOBUF_NAMESPACE_ID::int32 y_;
  ::PROTOBUF_NAMESPACE_ID::int32 theta_;
  ::PROTOBUF_NAMESPACE_ID::int32 vx_;
  ::PROTOBUF_NAMESPACE_ID::int32 vy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aisaaccommand_2eproto;
};
// -------------------------------------------------------------------

class Kick PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aisaacpb.Kick) */ {
 public:
  inline Kick() : Kick(nullptr) {};
  virtual ~Kick();

  Kick(const Kick& from);
  Kick(Kick&& from) noexcept
    : Kick() {
    *this = ::std::move(from);
  }

  inline Kick& operator=(const Kick& from) {
    CopyFrom(from);
    return *this;
  }
  inline Kick& operator=(Kick&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Kick& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Kick* internal_default_instance() {
    return reinterpret_cast<const Kick*>(
               &_Kick_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Kick& a, Kick& b) {
    a.Swap(&b);
  }
  inline void Swap(Kick* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Kick* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Kick* New() const final {
    return CreateMaybeMessage<Kick>(nullptr);
  }

  Kick* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Kick>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Kick& from);
  void MergeFrom(const Kick& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Kick* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aisaacpb.Kick";
  }
  protected:
  explicit Kick(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_aisaaccommand_2eproto);
    return ::descriptor_table_aisaaccommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Kick_KickType KickType;
  static constexpr KickType None =
    Kick_KickType_None;
  static constexpr KickType Force =
    Kick_KickType_Force;
  static constexpr KickType Sensor =
    Kick_KickType_Sensor;
  static constexpr KickType XY =
    Kick_KickType_XY;
  static inline bool KickType_IsValid(int value) {
    return Kick_KickType_IsValid(value);
  }
  static constexpr KickType KickType_MIN =
    Kick_KickType_KickType_MIN;
  static constexpr KickType KickType_MAX =
    Kick_KickType_KickType_MAX;
  static constexpr int KickType_ARRAYSIZE =
    Kick_KickType_KickType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KickType_descriptor() {
    return Kick_KickType_descriptor();
  }
  template<typename T>
  static inline const std::string& KickType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KickType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KickType_Name.");
    return Kick_KickType_Name(enum_t_value);
  }
  static inline bool KickType_Parse(const std::string& name,
      KickType* value) {
    return Kick_KickType_Parse(name, value);
  }

  typedef Kick_KickMethod KickMethod;
  static constexpr KickMethod Chip =
    Kick_KickMethod_Chip;
  static constexpr KickMethod Straight =
    Kick_KickMethod_Straight;
  static inline bool KickMethod_IsValid(int value) {
    return Kick_KickMethod_IsValid(value);
  }
  static constexpr KickMethod KickMethod_MIN =
    Kick_KickMethod_KickMethod_MIN;
  static constexpr KickMethod KickMethod_MAX =
    Kick_KickMethod_KickMethod_MAX;
  static constexpr int KickMethod_ARRAYSIZE =
    Kick_KickMethod_KickMethod_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  KickMethod_descriptor() {
    return Kick_KickMethod_descriptor();
  }
  template<typename T>
  static inline const std::string& KickMethod_Name(T enum_t_value) {
    static_assert(::std::is_same<T, KickMethod>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function KickMethod_Name.");
    return Kick_KickMethod_Name(enum_t_value);
  }
  static inline bool KickMethod_Parse(const std::string& name,
      KickMethod* value) {
    return Kick_KickMethod_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBallGoalFieldNumber = 6,
    kSensorTypeFieldNumber = 1,
    kKickMethodFieldNumber = 2,
    kKickPowerFieldNumber = 3,
    kBallKickActiveFieldNumber = 4,
    kFreeKickFlagFieldNumber = 5,
    kBallTargetAllowableErrorFieldNumber = 7,
  };
  // .aisaacpb.Position ball_goal = 6;
  bool has_ball_goal() const;
  private:
  bool _internal_has_ball_goal() const;
  public:
  void clear_ball_goal();
  const ::aisaacpb::Position& ball_goal() const;
  ::aisaacpb::Position* release_ball_goal();
  ::aisaacpb::Position* mutable_ball_goal();
  void set_allocated_ball_goal(::aisaacpb::Position* ball_goal);
  private:
  const ::aisaacpb::Position& _internal_ball_goal() const;
  ::aisaacpb::Position* _internal_mutable_ball_goal();
  public:
  void unsafe_arena_set_allocated_ball_goal(
      ::aisaacpb::Position* ball_goal);
  ::aisaacpb::Position* unsafe_arena_release_ball_goal();

  // .aisaacpb.Kick.KickType sensor_type = 1;
  void clear_sensor_type();
  ::aisaacpb::Kick_KickType sensor_type() const;
  void set_sensor_type(::aisaacpb::Kick_KickType value);
  private:
  ::aisaacpb::Kick_KickType _internal_sensor_type() const;
  void _internal_set_sensor_type(::aisaacpb::Kick_KickType value);
  public:

  // .aisaacpb.Kick.KickMethod kick_method = 2;
  void clear_kick_method();
  ::aisaacpb::Kick_KickMethod kick_method() const;
  void set_kick_method(::aisaacpb::Kick_KickMethod value);
  private:
  ::aisaacpb::Kick_KickMethod _internal_kick_method() const;
  void _internal_set_kick_method(::aisaacpb::Kick_KickMethod value);
  public:

  // int32 kick_power = 3;
  void clear_kick_power();
  ::PROTOBUF_NAMESPACE_ID::int32 kick_power() const;
  void set_kick_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kick_power() const;
  void _internal_set_kick_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool ball_kick_active = 4;
  void clear_ball_kick_active();
  bool ball_kick_active() const;
  void set_ball_kick_active(bool value);
  private:
  bool _internal_ball_kick_active() const;
  void _internal_set_ball_kick_active(bool value);
  public:

  // bool free_kick_flag = 5;
  void clear_free_kick_flag();
  bool free_kick_flag() const;
  void set_free_kick_flag(bool value);
  private:
  bool _internal_free_kick_flag() const;
  void _internal_set_free_kick_flag(bool value);
  public:

  // int32 ball_target_allowable_error = 7;
  void clear_ball_target_allowable_error();
  ::PROTOBUF_NAMESPACE_ID::int32 ball_target_allowable_error() const;
  void set_ball_target_allowable_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ball_target_allowable_error() const;
  void _internal_set_ball_target_allowable_error(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:aisaacpb.Kick)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::aisaacpb::Position* ball_goal_;
  int sensor_type_;
  int kick_method_;
  ::PROTOBUF_NAMESPACE_ID::int32 kick_power_;
  bool ball_kick_active_;
  bool free_kick_flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 ball_target_allowable_error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aisaaccommand_2eproto;
};
// -------------------------------------------------------------------

class Dribble PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aisaacpb.Dribble) */ {
 public:
  inline Dribble() : Dribble(nullptr) {};
  virtual ~Dribble();

  Dribble(const Dribble& from);
  Dribble(Dribble&& from) noexcept
    : Dribble() {
    *this = ::std::move(from);
  }

  inline Dribble& operator=(const Dribble& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dribble& operator=(Dribble&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dribble& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Dribble* internal_default_instance() {
    return reinterpret_cast<const Dribble*>(
               &_Dribble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Dribble& a, Dribble& b) {
    a.Swap(&b);
  }
  inline void Swap(Dribble* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dribble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dribble* New() const final {
    return CreateMaybeMessage<Dribble>(nullptr);
  }

  Dribble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dribble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dribble& from);
  void MergeFrom(const Dribble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dribble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aisaacpb.Dribble";
  }
  protected:
  explicit Dribble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_aisaaccommand_2eproto);
    return ::descriptor_table_aisaaccommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDribbleGoalFieldNumber = 4,
    kDribblePowerFieldNumber = 1,
    kDribbleStateFieldNumber = 2,
    kDribblerActiveFieldNumber = 3,
    kDribbleCompleteDistanceFieldNumber = 5,
  };
  // .aisaacpb.Position dribble_goal = 4;
  bool has_dribble_goal() const;
  private:
  bool _internal_has_dribble_goal() const;
  public:
  void clear_dribble_goal();
  const ::aisaacpb::Position& dribble_goal() const;
  ::aisaacpb::Position* release_dribble_goal();
  ::aisaacpb::Position* mutable_dribble_goal();
  void set_allocated_dribble_goal(::aisaacpb::Position* dribble_goal);
  private:
  const ::aisaacpb::Position& _internal_dribble_goal() const;
  ::aisaacpb::Position* _internal_mutable_dribble_goal();
  public:
  void unsafe_arena_set_allocated_dribble_goal(
      ::aisaacpb::Position* dribble_goal);
  ::aisaacpb::Position* unsafe_arena_release_dribble_goal();

  // double dribble_power = 1;
  void clear_dribble_power();
  double dribble_power() const;
  void set_dribble_power(double value);
  private:
  double _internal_dribble_power() const;
  void _internal_set_dribble_power(double value);
  public:

  // bool dribble_state = 2;
  void clear_dribble_state();
  bool dribble_state() const;
  void set_dribble_state(bool value);
  private:
  bool _internal_dribble_state() const;
  void _internal_set_dribble_state(bool value);
  public:

  // bool dribbler_active = 3;
  void clear_dribbler_active();
  bool dribbler_active() const;
  void set_dribbler_active(bool value);
  private:
  bool _internal_dribbler_active() const;
  void _internal_set_dribbler_active(bool value);
  public:

  // int32 dribble_complete_distance = 5;
  void clear_dribble_complete_distance();
  ::PROTOBUF_NAMESPACE_ID::int32 dribble_complete_distance() const;
  void set_dribble_complete_distance(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dribble_complete_distance() const;
  void _internal_set_dribble_complete_distance(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:aisaacpb.Dribble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::aisaacpb::Position* dribble_goal_;
  double dribble_power_;
  bool dribble_state_;
  bool dribbler_active_;
  ::PROTOBUF_NAMESPACE_ID::int32 dribble_complete_distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aisaaccommand_2eproto;
};
// -------------------------------------------------------------------

class SpcCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aisaacpb.SpcCommand) */ {
 public:
  inline SpcCommand() : SpcCommand(nullptr) {};
  virtual ~SpcCommand();

  SpcCommand(const SpcCommand& from);
  SpcCommand(SpcCommand&& from) noexcept
    : SpcCommand() {
    *this = ::std::move(from);
  }

  inline SpcCommand& operator=(const SpcCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpcCommand& operator=(SpcCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpcCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SpcCommand* internal_default_instance() {
    return reinterpret_cast<const SpcCommand*>(
               &_SpcCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SpcCommand& a, SpcCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SpcCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpcCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpcCommand* New() const final {
    return CreateMaybeMessage<SpcCommand>(nullptr);
  }

  SpcCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpcCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpcCommand& from);
  void MergeFrom(const SpcCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpcCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aisaacpb.SpcCommand";
  }
  protected:
  explicit SpcCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_aisaaccommand_2eproto);
    return ::descriptor_table_aisaaccommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoalPoseFieldNumber = 2,
    kMiddleGoalPoseFieldNumber = 5,
    kDribbleFieldNumber = 6,
    kKickFieldNumber = 7,
    kRobotCommandTypeFieldNumber = 1,
    kProhibitedZoneIgnoreFieldNumber = 3,
    kMiddleTargetFlagFieldNumber = 4,
  };
  // .aisaacpb.Position goal_pose = 2;
  bool has_goal_pose() const;
  private:
  bool _internal_has_goal_pose() const;
  public:
  void clear_goal_pose();
  const ::aisaacpb::Position& goal_pose() const;
  ::aisaacpb::Position* release_goal_pose();
  ::aisaacpb::Position* mutable_goal_pose();
  void set_allocated_goal_pose(::aisaacpb::Position* goal_pose);
  private:
  const ::aisaacpb::Position& _internal_goal_pose() const;
  ::aisaacpb::Position* _internal_mutable_goal_pose();
  public:
  void unsafe_arena_set_allocated_goal_pose(
      ::aisaacpb::Position* goal_pose);
  ::aisaacpb::Position* unsafe_arena_release_goal_pose();

  // .aisaacpb.Position middle_goal_pose = 5;
  bool has_middle_goal_pose() const;
  private:
  bool _internal_has_middle_goal_pose() const;
  public:
  void clear_middle_goal_pose();
  const ::aisaacpb::Position& middle_goal_pose() const;
  ::aisaacpb::Position* release_middle_goal_pose();
  ::aisaacpb::Position* mutable_middle_goal_pose();
  void set_allocated_middle_goal_pose(::aisaacpb::Position* middle_goal_pose);
  private:
  const ::aisaacpb::Position& _internal_middle_goal_pose() const;
  ::aisaacpb::Position* _internal_mutable_middle_goal_pose();
  public:
  void unsafe_arena_set_allocated_middle_goal_pose(
      ::aisaacpb::Position* middle_goal_pose);
  ::aisaacpb::Position* unsafe_arena_release_middle_goal_pose();

  // .aisaacpb.Dribble dribble = 6;
  bool has_dribble() const;
  private:
  bool _internal_has_dribble() const;
  public:
  void clear_dribble();
  const ::aisaacpb::Dribble& dribble() const;
  ::aisaacpb::Dribble* release_dribble();
  ::aisaacpb::Dribble* mutable_dribble();
  void set_allocated_dribble(::aisaacpb::Dribble* dribble);
  private:
  const ::aisaacpb::Dribble& _internal_dribble() const;
  ::aisaacpb::Dribble* _internal_mutable_dribble();
  public:
  void unsafe_arena_set_allocated_dribble(
      ::aisaacpb::Dribble* dribble);
  ::aisaacpb::Dribble* unsafe_arena_release_dribble();

  // .aisaacpb.Kick kick = 7;
  bool has_kick() const;
  private:
  bool _internal_has_kick() const;
  public:
  void clear_kick();
  const ::aisaacpb::Kick& kick() const;
  ::aisaacpb::Kick* release_kick();
  ::aisaacpb::Kick* mutable_kick();
  void set_allocated_kick(::aisaacpb::Kick* kick);
  private:
  const ::aisaacpb::Kick& _internal_kick() const;
  ::aisaacpb::Kick* _internal_mutable_kick();
  public:
  void unsafe_arena_set_allocated_kick(
      ::aisaacpb::Kick* kick);
  ::aisaacpb::Kick* unsafe_arena_release_kick();

  // .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
  void clear_robot_command_type();
  ::aisaacpb::RobotCommandCoordinateSystemType robot_command_type() const;
  void set_robot_command_type(::aisaacpb::RobotCommandCoordinateSystemType value);
  private:
  ::aisaacpb::RobotCommandCoordinateSystemType _internal_robot_command_type() const;
  void _internal_set_robot_command_type(::aisaacpb::RobotCommandCoordinateSystemType value);
  public:

  // bool prohibited_zone_ignore = 3;
  void clear_prohibited_zone_ignore();
  bool prohibited_zone_ignore() const;
  void set_prohibited_zone_ignore(bool value);
  private:
  bool _internal_prohibited_zone_ignore() const;
  void _internal_set_prohibited_zone_ignore(bool value);
  public:

  // bool middle_target_flag = 4;
  void clear_middle_target_flag();
  bool middle_target_flag() const;
  void set_middle_target_flag(bool value);
  private:
  bool _internal_middle_target_flag() const;
  void _internal_set_middle_target_flag(bool value);
  public:

  // @@protoc_insertion_point(class_scope:aisaacpb.SpcCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::aisaacpb::Position* goal_pose_;
  ::aisaacpb::Position* middle_goal_pose_;
  ::aisaacpb::Dribble* dribble_;
  ::aisaacpb::Kick* kick_;
  int robot_command_type_;
  bool prohibited_zone_ignore_;
  bool middle_target_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aisaaccommand_2eproto;
};
// -------------------------------------------------------------------

class RaspiCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aisaacpb.RaspiCommand) */ {
 public:
  inline RaspiCommand() : RaspiCommand(nullptr) {};
  virtual ~RaspiCommand();

  RaspiCommand(const RaspiCommand& from);
  RaspiCommand(RaspiCommand&& from) noexcept
    : RaspiCommand() {
    *this = ::std::move(from);
  }

  inline RaspiCommand& operator=(const RaspiCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RaspiCommand& operator=(RaspiCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RaspiCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RaspiCommand* internal_default_instance() {
    return reinterpret_cast<const RaspiCommand*>(
               &_RaspiCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RaspiCommand& a, RaspiCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RaspiCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RaspiCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RaspiCommand* New() const final {
    return CreateMaybeMessage<RaspiCommand>(nullptr);
  }

  RaspiCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RaspiCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RaspiCommand& from);
  void MergeFrom(const RaspiCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RaspiCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aisaacpb.RaspiCommand";
  }
  protected:
  explicit RaspiCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_aisaaccommand_2eproto);
    return ::descriptor_table_aisaaccommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoalPoseVelocityFieldNumber = 2,
    kDribbleFieldNumber = 3,
    kKickFieldNumber = 4,
    kRobotCommandTypeFieldNumber = 1,
  };
  // .aisaacpb.Velocity goal_pose_velocity = 2;
  bool has_goal_pose_velocity() const;
  private:
  bool _internal_has_goal_pose_velocity() const;
  public:
  void clear_goal_pose_velocity();
  const ::aisaacpb::Velocity& goal_pose_velocity() const;
  ::aisaacpb::Velocity* release_goal_pose_velocity();
  ::aisaacpb::Velocity* mutable_goal_pose_velocity();
  void set_allocated_goal_pose_velocity(::aisaacpb::Velocity* goal_pose_velocity);
  private:
  const ::aisaacpb::Velocity& _internal_goal_pose_velocity() const;
  ::aisaacpb::Velocity* _internal_mutable_goal_pose_velocity();
  public:
  void unsafe_arena_set_allocated_goal_pose_velocity(
      ::aisaacpb::Velocity* goal_pose_velocity);
  ::aisaacpb::Velocity* unsafe_arena_release_goal_pose_velocity();

  // .aisaacpb.Dribble dribble = 3;
  bool has_dribble() const;
  private:
  bool _internal_has_dribble() const;
  public:
  void clear_dribble();
  const ::aisaacpb::Dribble& dribble() const;
  ::aisaacpb::Dribble* release_dribble();
  ::aisaacpb::Dribble* mutable_dribble();
  void set_allocated_dribble(::aisaacpb::Dribble* dribble);
  private:
  const ::aisaacpb::Dribble& _internal_dribble() const;
  ::aisaacpb::Dribble* _internal_mutable_dribble();
  public:
  void unsafe_arena_set_allocated_dribble(
      ::aisaacpb::Dribble* dribble);
  ::aisaacpb::Dribble* unsafe_arena_release_dribble();

  // .aisaacpb.Kick kick = 4;
  bool has_kick() const;
  private:
  bool _internal_has_kick() const;
  public:
  void clear_kick();
  const ::aisaacpb::Kick& kick() const;
  ::aisaacpb::Kick* release_kick();
  ::aisaacpb::Kick* mutable_kick();
  void set_allocated_kick(::aisaacpb::Kick* kick);
  private:
  const ::aisaacpb::Kick& _internal_kick() const;
  ::aisaacpb::Kick* _internal_mutable_kick();
  public:
  void unsafe_arena_set_allocated_kick(
      ::aisaacpb::Kick* kick);
  ::aisaacpb::Kick* unsafe_arena_release_kick();

  // .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
  void clear_robot_command_type();
  ::aisaacpb::RobotCommandCoordinateSystemType robot_command_type() const;
  void set_robot_command_type(::aisaacpb::RobotCommandCoordinateSystemType value);
  private:
  ::aisaacpb::RobotCommandCoordinateSystemType _internal_robot_command_type() const;
  void _internal_set_robot_command_type(::aisaacpb::RobotCommandCoordinateSystemType value);
  public:

  // @@protoc_insertion_point(class_scope:aisaacpb.RaspiCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::aisaacpb::Velocity* goal_pose_velocity_;
  ::aisaacpb::Dribble* dribble_;
  ::aisaacpb::Kick* kick_;
  int robot_command_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aisaaccommand_2eproto;
};
// -------------------------------------------------------------------

class VisionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:aisaacpb.VisionData) */ {
 public:
  inline VisionData() : VisionData(nullptr) {};
  virtual ~VisionData();

  VisionData(const VisionData& from);
  VisionData(VisionData&& from) noexcept
    : VisionData() {
    *this = ::std::move(from);
  }

  inline VisionData& operator=(const VisionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline VisionData& operator=(VisionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VisionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VisionData* internal_default_instance() {
    return reinterpret_cast<const VisionData*>(
               &_VisionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VisionData& a, VisionData& b) {
    a.Swap(&b);
  }
  inline void Swap(VisionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VisionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VisionData* New() const final {
    return CreateMaybeMessage<VisionData>(nullptr);
  }

  VisionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VisionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VisionData& from);
  void MergeFrom(const VisionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VisionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "aisaacpb.VisionData";
  }
  protected:
  explicit VisionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_aisaaccommand_2eproto);
    return ::descriptor_table_aisaaccommand_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclesFieldNumber = 3,
    kOwnMachinePositionFieldNumber = 1,
    kBallPositionFieldNumber = 2,
  };
  // repeated .aisaacpb.Obstacle obstacles = 3;
  int obstacles_size() const;
  private:
  int _internal_obstacles_size() const;
  public:
  void clear_obstacles();
  ::aisaacpb::Obstacle* mutable_obstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aisaacpb::Obstacle >*
      mutable_obstacles();
  private:
  const ::aisaacpb::Obstacle& _internal_obstacles(int index) const;
  ::aisaacpb::Obstacle* _internal_add_obstacles();
  public:
  const ::aisaacpb::Obstacle& obstacles(int index) const;
  ::aisaacpb::Obstacle* add_obstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aisaacpb::Obstacle >&
      obstacles() const;

  // .aisaacpb.Position own_machine_position = 1;
  bool has_own_machine_position() const;
  private:
  bool _internal_has_own_machine_position() const;
  public:
  void clear_own_machine_position();
  const ::aisaacpb::Position& own_machine_position() const;
  ::aisaacpb::Position* release_own_machine_position();
  ::aisaacpb::Position* mutable_own_machine_position();
  void set_allocated_own_machine_position(::aisaacpb::Position* own_machine_position);
  private:
  const ::aisaacpb::Position& _internal_own_machine_position() const;
  ::aisaacpb::Position* _internal_mutable_own_machine_position();
  public:
  void unsafe_arena_set_allocated_own_machine_position(
      ::aisaacpb::Position* own_machine_position);
  ::aisaacpb::Position* unsafe_arena_release_own_machine_position();

  // .aisaacpb.Position ball_position = 2;
  bool has_ball_position() const;
  private:
  bool _internal_has_ball_position() const;
  public:
  void clear_ball_position();
  const ::aisaacpb::Position& ball_position() const;
  ::aisaacpb::Position* release_ball_position();
  ::aisaacpb::Position* mutable_ball_position();
  void set_allocated_ball_position(::aisaacpb::Position* ball_position);
  private:
  const ::aisaacpb::Position& _internal_ball_position() const;
  ::aisaacpb::Position* _internal_mutable_ball_position();
  public:
  void unsafe_arena_set_allocated_ball_position(
      ::aisaacpb::Position* ball_position);
  ::aisaacpb::Position* unsafe_arena_release_ball_position();

  // @@protoc_insertion_point(class_scope:aisaacpb.VisionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aisaacpb::Obstacle > obstacles_;
  ::aisaacpb::Position* own_machine_position_;
  ::aisaacpb::Position* ball_position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_aisaaccommand_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// int32 x = 1;
inline void Position::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::x() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Position.x)
  return _internal_x();
}
inline void Position::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Position::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Position.x)
}

// int32 y = 2;
inline void Position::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::y() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Position.y)
  return _internal_y();
}
inline void Position::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Position::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Position.y)
}

// int32 theta = 3;
inline void Position::clear_theta() {
  theta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::_internal_theta() const {
  return theta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Position::theta() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Position.theta)
  return _internal_theta();
}
inline void Position::_internal_set_theta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  theta_ = value;
}
inline void Position::set_theta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Position.theta)
}

// -------------------------------------------------------------------

// Velocity

// int32 vx = 1;
inline void Velocity::clear_vx() {
  vx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Velocity::_internal_vx() const {
  return vx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Velocity::vx() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Velocity.vx)
  return _internal_vx();
}
inline void Velocity::_internal_set_vx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vx_ = value;
}
inline void Velocity::set_vx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vx(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Velocity.vx)
}

// int32 vy = 2;
inline void Velocity::clear_vy() {
  vy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Velocity::_internal_vy() const {
  return vy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Velocity::vy() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Velocity.vy)
  return _internal_vy();
}
inline void Velocity::_internal_set_vy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vy_ = value;
}
inline void Velocity::set_vy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vy(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Velocity.vy)
}

// int32 omega = 3;
inline void Velocity::clear_omega() {
  omega_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Velocity::_internal_omega() const {
  return omega_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Velocity::omega() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Velocity.omega)
  return _internal_omega();
}
inline void Velocity::_internal_set_omega(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  omega_ = value;
}
inline void Velocity::set_omega(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_omega(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Velocity.omega)
}

// -------------------------------------------------------------------

// Acceleration

// int32 ax = 1;
inline void Acceleration::clear_ax() {
  ax_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acceleration::_internal_ax() const {
  return ax_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acceleration::ax() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Acceleration.ax)
  return _internal_ax();
}
inline void Acceleration::_internal_set_ax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ax_ = value;
}
inline void Acceleration::set_ax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ax(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Acceleration.ax)
}

// int32 ay = 2;
inline void Acceleration::clear_ay() {
  ay_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acceleration::_internal_ay() const {
  return ay_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Acceleration::ay() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Acceleration.ay)
  return _internal_ay();
}
inline void Acceleration::_internal_set_ay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ay_ = value;
}
inline void Acceleration::set_ay(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ay(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Acceleration.ay)
}

// -------------------------------------------------------------------

// Obstacle

// int32 x = 1;
inline void Obstacle::clear_x() {
  x_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::x() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Obstacle.x)
  return _internal_x();
}
inline void Obstacle::_internal_set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x_ = value;
}
inline void Obstacle::set_x(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Obstacle.x)
}

// int32 y = 2;
inline void Obstacle::clear_y() {
  y_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::y() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Obstacle.y)
  return _internal_y();
}
inline void Obstacle::_internal_set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y_ = value;
}
inline void Obstacle::set_y(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Obstacle.y)
}

// int32 theta = 3;
inline void Obstacle::clear_theta() {
  theta_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_theta() const {
  return theta_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::theta() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Obstacle.theta)
  return _internal_theta();
}
inline void Obstacle::_internal_set_theta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  theta_ = value;
}
inline void Obstacle::set_theta(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Obstacle.theta)
}

// int32 vx = 4;
inline void Obstacle::clear_vx() {
  vx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_vx() const {
  return vx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::vx() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Obstacle.vx)
  return _internal_vx();
}
inline void Obstacle::_internal_set_vx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vx_ = value;
}
inline void Obstacle::set_vx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vx(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Obstacle.vx)
}

// int32 vy = 5;
inline void Obstacle::clear_vy() {
  vy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::_internal_vy() const {
  return vy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Obstacle::vy() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Obstacle.vy)
  return _internal_vy();
}
inline void Obstacle::_internal_set_vy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vy_ = value;
}
inline void Obstacle::set_vy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vy(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Obstacle.vy)
}

// -------------------------------------------------------------------

// Kick

// .aisaacpb.Kick.KickType sensor_type = 1;
inline void Kick::clear_sensor_type() {
  sensor_type_ = 0;
}
inline ::aisaacpb::Kick_KickType Kick::_internal_sensor_type() const {
  return static_cast< ::aisaacpb::Kick_KickType >(sensor_type_);
}
inline ::aisaacpb::Kick_KickType Kick::sensor_type() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Kick.sensor_type)
  return _internal_sensor_type();
}
inline void Kick::_internal_set_sensor_type(::aisaacpb::Kick_KickType value) {
  
  sensor_type_ = value;
}
inline void Kick::set_sensor_type(::aisaacpb::Kick_KickType value) {
  _internal_set_sensor_type(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Kick.sensor_type)
}

// .aisaacpb.Kick.KickMethod kick_method = 2;
inline void Kick::clear_kick_method() {
  kick_method_ = 0;
}
inline ::aisaacpb::Kick_KickMethod Kick::_internal_kick_method() const {
  return static_cast< ::aisaacpb::Kick_KickMethod >(kick_method_);
}
inline ::aisaacpb::Kick_KickMethod Kick::kick_method() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Kick.kick_method)
  return _internal_kick_method();
}
inline void Kick::_internal_set_kick_method(::aisaacpb::Kick_KickMethod value) {
  
  kick_method_ = value;
}
inline void Kick::set_kick_method(::aisaacpb::Kick_KickMethod value) {
  _internal_set_kick_method(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Kick.kick_method)
}

// int32 kick_power = 3;
inline void Kick::clear_kick_power() {
  kick_power_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Kick::_internal_kick_power() const {
  return kick_power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Kick::kick_power() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Kick.kick_power)
  return _internal_kick_power();
}
inline void Kick::_internal_set_kick_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kick_power_ = value;
}
inline void Kick::set_kick_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kick_power(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Kick.kick_power)
}

// bool ball_kick_active = 4;
inline void Kick::clear_ball_kick_active() {
  ball_kick_active_ = false;
}
inline bool Kick::_internal_ball_kick_active() const {
  return ball_kick_active_;
}
inline bool Kick::ball_kick_active() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Kick.ball_kick_active)
  return _internal_ball_kick_active();
}
inline void Kick::_internal_set_ball_kick_active(bool value) {
  
  ball_kick_active_ = value;
}
inline void Kick::set_ball_kick_active(bool value) {
  _internal_set_ball_kick_active(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Kick.ball_kick_active)
}

// bool free_kick_flag = 5;
inline void Kick::clear_free_kick_flag() {
  free_kick_flag_ = false;
}
inline bool Kick::_internal_free_kick_flag() const {
  return free_kick_flag_;
}
inline bool Kick::free_kick_flag() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Kick.free_kick_flag)
  return _internal_free_kick_flag();
}
inline void Kick::_internal_set_free_kick_flag(bool value) {
  
  free_kick_flag_ = value;
}
inline void Kick::set_free_kick_flag(bool value) {
  _internal_set_free_kick_flag(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Kick.free_kick_flag)
}

// .aisaacpb.Position ball_goal = 6;
inline bool Kick::_internal_has_ball_goal() const {
  return this != internal_default_instance() && ball_goal_ != nullptr;
}
inline bool Kick::has_ball_goal() const {
  return _internal_has_ball_goal();
}
inline void Kick::clear_ball_goal() {
  if (GetArena() == nullptr && ball_goal_ != nullptr) {
    delete ball_goal_;
  }
  ball_goal_ = nullptr;
}
inline const ::aisaacpb::Position& Kick::_internal_ball_goal() const {
  const ::aisaacpb::Position* p = ball_goal_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aisaacpb::Position*>(
      &::aisaacpb::_Position_default_instance_);
}
inline const ::aisaacpb::Position& Kick::ball_goal() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Kick.ball_goal)
  return _internal_ball_goal();
}
inline void Kick::unsafe_arena_set_allocated_ball_goal(
    ::aisaacpb::Position* ball_goal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ball_goal_);
  }
  ball_goal_ = ball_goal;
  if (ball_goal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aisaacpb.Kick.ball_goal)
}
inline ::aisaacpb::Position* Kick::release_ball_goal() {
  auto temp = unsafe_arena_release_ball_goal();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aisaacpb::Position* Kick::unsafe_arena_release_ball_goal() {
  // @@protoc_insertion_point(field_release:aisaacpb.Kick.ball_goal)
  
  ::aisaacpb::Position* temp = ball_goal_;
  ball_goal_ = nullptr;
  return temp;
}
inline ::aisaacpb::Position* Kick::_internal_mutable_ball_goal() {
  
  if (ball_goal_ == nullptr) {
    auto* p = CreateMaybeMessage<::aisaacpb::Position>(GetArena());
    ball_goal_ = p;
  }
  return ball_goal_;
}
inline ::aisaacpb::Position* Kick::mutable_ball_goal() {
  // @@protoc_insertion_point(field_mutable:aisaacpb.Kick.ball_goal)
  return _internal_mutable_ball_goal();
}
inline void Kick::set_allocated_ball_goal(::aisaacpb::Position* ball_goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ball_goal_;
  }
  if (ball_goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ball_goal);
    if (message_arena != submessage_arena) {
      ball_goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ball_goal, submessage_arena);
    }
    
  } else {
    
  }
  ball_goal_ = ball_goal;
  // @@protoc_insertion_point(field_set_allocated:aisaacpb.Kick.ball_goal)
}

// int32 ball_target_allowable_error = 7;
inline void Kick::clear_ball_target_allowable_error() {
  ball_target_allowable_error_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Kick::_internal_ball_target_allowable_error() const {
  return ball_target_allowable_error_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Kick::ball_target_allowable_error() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Kick.ball_target_allowable_error)
  return _internal_ball_target_allowable_error();
}
inline void Kick::_internal_set_ball_target_allowable_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ball_target_allowable_error_ = value;
}
inline void Kick::set_ball_target_allowable_error(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ball_target_allowable_error(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Kick.ball_target_allowable_error)
}

// -------------------------------------------------------------------

// Dribble

// double dribble_power = 1;
inline void Dribble::clear_dribble_power() {
  dribble_power_ = 0;
}
inline double Dribble::_internal_dribble_power() const {
  return dribble_power_;
}
inline double Dribble::dribble_power() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Dribble.dribble_power)
  return _internal_dribble_power();
}
inline void Dribble::_internal_set_dribble_power(double value) {
  
  dribble_power_ = value;
}
inline void Dribble::set_dribble_power(double value) {
  _internal_set_dribble_power(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Dribble.dribble_power)
}

// bool dribble_state = 2;
inline void Dribble::clear_dribble_state() {
  dribble_state_ = false;
}
inline bool Dribble::_internal_dribble_state() const {
  return dribble_state_;
}
inline bool Dribble::dribble_state() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Dribble.dribble_state)
  return _internal_dribble_state();
}
inline void Dribble::_internal_set_dribble_state(bool value) {
  
  dribble_state_ = value;
}
inline void Dribble::set_dribble_state(bool value) {
  _internal_set_dribble_state(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Dribble.dribble_state)
}

// bool dribbler_active = 3;
inline void Dribble::clear_dribbler_active() {
  dribbler_active_ = false;
}
inline bool Dribble::_internal_dribbler_active() const {
  return dribbler_active_;
}
inline bool Dribble::dribbler_active() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Dribble.dribbler_active)
  return _internal_dribbler_active();
}
inline void Dribble::_internal_set_dribbler_active(bool value) {
  
  dribbler_active_ = value;
}
inline void Dribble::set_dribbler_active(bool value) {
  _internal_set_dribbler_active(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Dribble.dribbler_active)
}

// .aisaacpb.Position dribble_goal = 4;
inline bool Dribble::_internal_has_dribble_goal() const {
  return this != internal_default_instance() && dribble_goal_ != nullptr;
}
inline bool Dribble::has_dribble_goal() const {
  return _internal_has_dribble_goal();
}
inline void Dribble::clear_dribble_goal() {
  if (GetArena() == nullptr && dribble_goal_ != nullptr) {
    delete dribble_goal_;
  }
  dribble_goal_ = nullptr;
}
inline const ::aisaacpb::Position& Dribble::_internal_dribble_goal() const {
  const ::aisaacpb::Position* p = dribble_goal_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aisaacpb::Position*>(
      &::aisaacpb::_Position_default_instance_);
}
inline const ::aisaacpb::Position& Dribble::dribble_goal() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Dribble.dribble_goal)
  return _internal_dribble_goal();
}
inline void Dribble::unsafe_arena_set_allocated_dribble_goal(
    ::aisaacpb::Position* dribble_goal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dribble_goal_);
  }
  dribble_goal_ = dribble_goal;
  if (dribble_goal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aisaacpb.Dribble.dribble_goal)
}
inline ::aisaacpb::Position* Dribble::release_dribble_goal() {
  auto temp = unsafe_arena_release_dribble_goal();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aisaacpb::Position* Dribble::unsafe_arena_release_dribble_goal() {
  // @@protoc_insertion_point(field_release:aisaacpb.Dribble.dribble_goal)
  
  ::aisaacpb::Position* temp = dribble_goal_;
  dribble_goal_ = nullptr;
  return temp;
}
inline ::aisaacpb::Position* Dribble::_internal_mutable_dribble_goal() {
  
  if (dribble_goal_ == nullptr) {
    auto* p = CreateMaybeMessage<::aisaacpb::Position>(GetArena());
    dribble_goal_ = p;
  }
  return dribble_goal_;
}
inline ::aisaacpb::Position* Dribble::mutable_dribble_goal() {
  // @@protoc_insertion_point(field_mutable:aisaacpb.Dribble.dribble_goal)
  return _internal_mutable_dribble_goal();
}
inline void Dribble::set_allocated_dribble_goal(::aisaacpb::Position* dribble_goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dribble_goal_;
  }
  if (dribble_goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dribble_goal);
    if (message_arena != submessage_arena) {
      dribble_goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dribble_goal, submessage_arena);
    }
    
  } else {
    
  }
  dribble_goal_ = dribble_goal;
  // @@protoc_insertion_point(field_set_allocated:aisaacpb.Dribble.dribble_goal)
}

// int32 dribble_complete_distance = 5;
inline void Dribble::clear_dribble_complete_distance() {
  dribble_complete_distance_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dribble::_internal_dribble_complete_distance() const {
  return dribble_complete_distance_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Dribble::dribble_complete_distance() const {
  // @@protoc_insertion_point(field_get:aisaacpb.Dribble.dribble_complete_distance)
  return _internal_dribble_complete_distance();
}
inline void Dribble::_internal_set_dribble_complete_distance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dribble_complete_distance_ = value;
}
inline void Dribble::set_dribble_complete_distance(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dribble_complete_distance(value);
  // @@protoc_insertion_point(field_set:aisaacpb.Dribble.dribble_complete_distance)
}

// -------------------------------------------------------------------

// SpcCommand

// .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
inline void SpcCommand::clear_robot_command_type() {
  robot_command_type_ = 0;
}
inline ::aisaacpb::RobotCommandCoordinateSystemType SpcCommand::_internal_robot_command_type() const {
  return static_cast< ::aisaacpb::RobotCommandCoordinateSystemType >(robot_command_type_);
}
inline ::aisaacpb::RobotCommandCoordinateSystemType SpcCommand::robot_command_type() const {
  // @@protoc_insertion_point(field_get:aisaacpb.SpcCommand.robot_command_type)
  return _internal_robot_command_type();
}
inline void SpcCommand::_internal_set_robot_command_type(::aisaacpb::RobotCommandCoordinateSystemType value) {
  
  robot_command_type_ = value;
}
inline void SpcCommand::set_robot_command_type(::aisaacpb::RobotCommandCoordinateSystemType value) {
  _internal_set_robot_command_type(value);
  // @@protoc_insertion_point(field_set:aisaacpb.SpcCommand.robot_command_type)
}

// .aisaacpb.Position goal_pose = 2;
inline bool SpcCommand::_internal_has_goal_pose() const {
  return this != internal_default_instance() && goal_pose_ != nullptr;
}
inline bool SpcCommand::has_goal_pose() const {
  return _internal_has_goal_pose();
}
inline void SpcCommand::clear_goal_pose() {
  if (GetArena() == nullptr && goal_pose_ != nullptr) {
    delete goal_pose_;
  }
  goal_pose_ = nullptr;
}
inline const ::aisaacpb::Position& SpcCommand::_internal_goal_pose() const {
  const ::aisaacpb::Position* p = goal_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aisaacpb::Position*>(
      &::aisaacpb::_Position_default_instance_);
}
inline const ::aisaacpb::Position& SpcCommand::goal_pose() const {
  // @@protoc_insertion_point(field_get:aisaacpb.SpcCommand.goal_pose)
  return _internal_goal_pose();
}
inline void SpcCommand::unsafe_arena_set_allocated_goal_pose(
    ::aisaacpb::Position* goal_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(goal_pose_);
  }
  goal_pose_ = goal_pose;
  if (goal_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aisaacpb.SpcCommand.goal_pose)
}
inline ::aisaacpb::Position* SpcCommand::release_goal_pose() {
  auto temp = unsafe_arena_release_goal_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aisaacpb::Position* SpcCommand::unsafe_arena_release_goal_pose() {
  // @@protoc_insertion_point(field_release:aisaacpb.SpcCommand.goal_pose)
  
  ::aisaacpb::Position* temp = goal_pose_;
  goal_pose_ = nullptr;
  return temp;
}
inline ::aisaacpb::Position* SpcCommand::_internal_mutable_goal_pose() {
  
  if (goal_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::aisaacpb::Position>(GetArena());
    goal_pose_ = p;
  }
  return goal_pose_;
}
inline ::aisaacpb::Position* SpcCommand::mutable_goal_pose() {
  // @@protoc_insertion_point(field_mutable:aisaacpb.SpcCommand.goal_pose)
  return _internal_mutable_goal_pose();
}
inline void SpcCommand::set_allocated_goal_pose(::aisaacpb::Position* goal_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete goal_pose_;
  }
  if (goal_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(goal_pose);
    if (message_arena != submessage_arena) {
      goal_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, goal_pose, submessage_arena);
    }
    
  } else {
    
  }
  goal_pose_ = goal_pose;
  // @@protoc_insertion_point(field_set_allocated:aisaacpb.SpcCommand.goal_pose)
}

// bool prohibited_zone_ignore = 3;
inline void SpcCommand::clear_prohibited_zone_ignore() {
  prohibited_zone_ignore_ = false;
}
inline bool SpcCommand::_internal_prohibited_zone_ignore() const {
  return prohibited_zone_ignore_;
}
inline bool SpcCommand::prohibited_zone_ignore() const {
  // @@protoc_insertion_point(field_get:aisaacpb.SpcCommand.prohibited_zone_ignore)
  return _internal_prohibited_zone_ignore();
}
inline void SpcCommand::_internal_set_prohibited_zone_ignore(bool value) {
  
  prohibited_zone_ignore_ = value;
}
inline void SpcCommand::set_prohibited_zone_ignore(bool value) {
  _internal_set_prohibited_zone_ignore(value);
  // @@protoc_insertion_point(field_set:aisaacpb.SpcCommand.prohibited_zone_ignore)
}

// bool middle_target_flag = 4;
inline void SpcCommand::clear_middle_target_flag() {
  middle_target_flag_ = false;
}
inline bool SpcCommand::_internal_middle_target_flag() const {
  return middle_target_flag_;
}
inline bool SpcCommand::middle_target_flag() const {
  // @@protoc_insertion_point(field_get:aisaacpb.SpcCommand.middle_target_flag)
  return _internal_middle_target_flag();
}
inline void SpcCommand::_internal_set_middle_target_flag(bool value) {
  
  middle_target_flag_ = value;
}
inline void SpcCommand::set_middle_target_flag(bool value) {
  _internal_set_middle_target_flag(value);
  // @@protoc_insertion_point(field_set:aisaacpb.SpcCommand.middle_target_flag)
}

// .aisaacpb.Position middle_goal_pose = 5;
inline bool SpcCommand::_internal_has_middle_goal_pose() const {
  return this != internal_default_instance() && middle_goal_pose_ != nullptr;
}
inline bool SpcCommand::has_middle_goal_pose() const {
  return _internal_has_middle_goal_pose();
}
inline void SpcCommand::clear_middle_goal_pose() {
  if (GetArena() == nullptr && middle_goal_pose_ != nullptr) {
    delete middle_goal_pose_;
  }
  middle_goal_pose_ = nullptr;
}
inline const ::aisaacpb::Position& SpcCommand::_internal_middle_goal_pose() const {
  const ::aisaacpb::Position* p = middle_goal_pose_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aisaacpb::Position*>(
      &::aisaacpb::_Position_default_instance_);
}
inline const ::aisaacpb::Position& SpcCommand::middle_goal_pose() const {
  // @@protoc_insertion_point(field_get:aisaacpb.SpcCommand.middle_goal_pose)
  return _internal_middle_goal_pose();
}
inline void SpcCommand::unsafe_arena_set_allocated_middle_goal_pose(
    ::aisaacpb::Position* middle_goal_pose) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(middle_goal_pose_);
  }
  middle_goal_pose_ = middle_goal_pose;
  if (middle_goal_pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aisaacpb.SpcCommand.middle_goal_pose)
}
inline ::aisaacpb::Position* SpcCommand::release_middle_goal_pose() {
  auto temp = unsafe_arena_release_middle_goal_pose();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aisaacpb::Position* SpcCommand::unsafe_arena_release_middle_goal_pose() {
  // @@protoc_insertion_point(field_release:aisaacpb.SpcCommand.middle_goal_pose)
  
  ::aisaacpb::Position* temp = middle_goal_pose_;
  middle_goal_pose_ = nullptr;
  return temp;
}
inline ::aisaacpb::Position* SpcCommand::_internal_mutable_middle_goal_pose() {
  
  if (middle_goal_pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::aisaacpb::Position>(GetArena());
    middle_goal_pose_ = p;
  }
  return middle_goal_pose_;
}
inline ::aisaacpb::Position* SpcCommand::mutable_middle_goal_pose() {
  // @@protoc_insertion_point(field_mutable:aisaacpb.SpcCommand.middle_goal_pose)
  return _internal_mutable_middle_goal_pose();
}
inline void SpcCommand::set_allocated_middle_goal_pose(::aisaacpb::Position* middle_goal_pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete middle_goal_pose_;
  }
  if (middle_goal_pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(middle_goal_pose);
    if (message_arena != submessage_arena) {
      middle_goal_pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, middle_goal_pose, submessage_arena);
    }
    
  } else {
    
  }
  middle_goal_pose_ = middle_goal_pose;
  // @@protoc_insertion_point(field_set_allocated:aisaacpb.SpcCommand.middle_goal_pose)
}

// .aisaacpb.Dribble dribble = 6;
inline bool SpcCommand::_internal_has_dribble() const {
  return this != internal_default_instance() && dribble_ != nullptr;
}
inline bool SpcCommand::has_dribble() const {
  return _internal_has_dribble();
}
inline void SpcCommand::clear_dribble() {
  if (GetArena() == nullptr && dribble_ != nullptr) {
    delete dribble_;
  }
  dribble_ = nullptr;
}
inline const ::aisaacpb::Dribble& SpcCommand::_internal_dribble() const {
  const ::aisaacpb::Dribble* p = dribble_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aisaacpb::Dribble*>(
      &::aisaacpb::_Dribble_default_instance_);
}
inline const ::aisaacpb::Dribble& SpcCommand::dribble() const {
  // @@protoc_insertion_point(field_get:aisaacpb.SpcCommand.dribble)
  return _internal_dribble();
}
inline void SpcCommand::unsafe_arena_set_allocated_dribble(
    ::aisaacpb::Dribble* dribble) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dribble_);
  }
  dribble_ = dribble;
  if (dribble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aisaacpb.SpcCommand.dribble)
}
inline ::aisaacpb::Dribble* SpcCommand::release_dribble() {
  auto temp = unsafe_arena_release_dribble();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aisaacpb::Dribble* SpcCommand::unsafe_arena_release_dribble() {
  // @@protoc_insertion_point(field_release:aisaacpb.SpcCommand.dribble)
  
  ::aisaacpb::Dribble* temp = dribble_;
  dribble_ = nullptr;
  return temp;
}
inline ::aisaacpb::Dribble* SpcCommand::_internal_mutable_dribble() {
  
  if (dribble_ == nullptr) {
    auto* p = CreateMaybeMessage<::aisaacpb::Dribble>(GetArena());
    dribble_ = p;
  }
  return dribble_;
}
inline ::aisaacpb::Dribble* SpcCommand::mutable_dribble() {
  // @@protoc_insertion_point(field_mutable:aisaacpb.SpcCommand.dribble)
  return _internal_mutable_dribble();
}
inline void SpcCommand::set_allocated_dribble(::aisaacpb::Dribble* dribble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dribble_;
  }
  if (dribble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dribble);
    if (message_arena != submessage_arena) {
      dribble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dribble, submessage_arena);
    }
    
  } else {
    
  }
  dribble_ = dribble;
  // @@protoc_insertion_point(field_set_allocated:aisaacpb.SpcCommand.dribble)
}

// .aisaacpb.Kick kick = 7;
inline bool SpcCommand::_internal_has_kick() const {
  return this != internal_default_instance() && kick_ != nullptr;
}
inline bool SpcCommand::has_kick() const {
  return _internal_has_kick();
}
inline void SpcCommand::clear_kick() {
  if (GetArena() == nullptr && kick_ != nullptr) {
    delete kick_;
  }
  kick_ = nullptr;
}
inline const ::aisaacpb::Kick& SpcCommand::_internal_kick() const {
  const ::aisaacpb::Kick* p = kick_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aisaacpb::Kick*>(
      &::aisaacpb::_Kick_default_instance_);
}
inline const ::aisaacpb::Kick& SpcCommand::kick() const {
  // @@protoc_insertion_point(field_get:aisaacpb.SpcCommand.kick)
  return _internal_kick();
}
inline void SpcCommand::unsafe_arena_set_allocated_kick(
    ::aisaacpb::Kick* kick) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kick_);
  }
  kick_ = kick;
  if (kick) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aisaacpb.SpcCommand.kick)
}
inline ::aisaacpb::Kick* SpcCommand::release_kick() {
  auto temp = unsafe_arena_release_kick();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aisaacpb::Kick* SpcCommand::unsafe_arena_release_kick() {
  // @@protoc_insertion_point(field_release:aisaacpb.SpcCommand.kick)
  
  ::aisaacpb::Kick* temp = kick_;
  kick_ = nullptr;
  return temp;
}
inline ::aisaacpb::Kick* SpcCommand::_internal_mutable_kick() {
  
  if (kick_ == nullptr) {
    auto* p = CreateMaybeMessage<::aisaacpb::Kick>(GetArena());
    kick_ = p;
  }
  return kick_;
}
inline ::aisaacpb::Kick* SpcCommand::mutable_kick() {
  // @@protoc_insertion_point(field_mutable:aisaacpb.SpcCommand.kick)
  return _internal_mutable_kick();
}
inline void SpcCommand::set_allocated_kick(::aisaacpb::Kick* kick) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete kick_;
  }
  if (kick) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kick);
    if (message_arena != submessage_arena) {
      kick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kick, submessage_arena);
    }
    
  } else {
    
  }
  kick_ = kick;
  // @@protoc_insertion_point(field_set_allocated:aisaacpb.SpcCommand.kick)
}

// -------------------------------------------------------------------

// RaspiCommand

// .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
inline void RaspiCommand::clear_robot_command_type() {
  robot_command_type_ = 0;
}
inline ::aisaacpb::RobotCommandCoordinateSystemType RaspiCommand::_internal_robot_command_type() const {
  return static_cast< ::aisaacpb::RobotCommandCoordinateSystemType >(robot_command_type_);
}
inline ::aisaacpb::RobotCommandCoordinateSystemType RaspiCommand::robot_command_type() const {
  // @@protoc_insertion_point(field_get:aisaacpb.RaspiCommand.robot_command_type)
  return _internal_robot_command_type();
}
inline void RaspiCommand::_internal_set_robot_command_type(::aisaacpb::RobotCommandCoordinateSystemType value) {
  
  robot_command_type_ = value;
}
inline void RaspiCommand::set_robot_command_type(::aisaacpb::RobotCommandCoordinateSystemType value) {
  _internal_set_robot_command_type(value);
  // @@protoc_insertion_point(field_set:aisaacpb.RaspiCommand.robot_command_type)
}

// .aisaacpb.Velocity goal_pose_velocity = 2;
inline bool RaspiCommand::_internal_has_goal_pose_velocity() const {
  return this != internal_default_instance() && goal_pose_velocity_ != nullptr;
}
inline bool RaspiCommand::has_goal_pose_velocity() const {
  return _internal_has_goal_pose_velocity();
}
inline void RaspiCommand::clear_goal_pose_velocity() {
  if (GetArena() == nullptr && goal_pose_velocity_ != nullptr) {
    delete goal_pose_velocity_;
  }
  goal_pose_velocity_ = nullptr;
}
inline const ::aisaacpb::Velocity& RaspiCommand::_internal_goal_pose_velocity() const {
  const ::aisaacpb::Velocity* p = goal_pose_velocity_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aisaacpb::Velocity*>(
      &::aisaacpb::_Velocity_default_instance_);
}
inline const ::aisaacpb::Velocity& RaspiCommand::goal_pose_velocity() const {
  // @@protoc_insertion_point(field_get:aisaacpb.RaspiCommand.goal_pose_velocity)
  return _internal_goal_pose_velocity();
}
inline void RaspiCommand::unsafe_arena_set_allocated_goal_pose_velocity(
    ::aisaacpb::Velocity* goal_pose_velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(goal_pose_velocity_);
  }
  goal_pose_velocity_ = goal_pose_velocity;
  if (goal_pose_velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aisaacpb.RaspiCommand.goal_pose_velocity)
}
inline ::aisaacpb::Velocity* RaspiCommand::release_goal_pose_velocity() {
  auto temp = unsafe_arena_release_goal_pose_velocity();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aisaacpb::Velocity* RaspiCommand::unsafe_arena_release_goal_pose_velocity() {
  // @@protoc_insertion_point(field_release:aisaacpb.RaspiCommand.goal_pose_velocity)
  
  ::aisaacpb::Velocity* temp = goal_pose_velocity_;
  goal_pose_velocity_ = nullptr;
  return temp;
}
inline ::aisaacpb::Velocity* RaspiCommand::_internal_mutable_goal_pose_velocity() {
  
  if (goal_pose_velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::aisaacpb::Velocity>(GetArena());
    goal_pose_velocity_ = p;
  }
  return goal_pose_velocity_;
}
inline ::aisaacpb::Velocity* RaspiCommand::mutable_goal_pose_velocity() {
  // @@protoc_insertion_point(field_mutable:aisaacpb.RaspiCommand.goal_pose_velocity)
  return _internal_mutable_goal_pose_velocity();
}
inline void RaspiCommand::set_allocated_goal_pose_velocity(::aisaacpb::Velocity* goal_pose_velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete goal_pose_velocity_;
  }
  if (goal_pose_velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(goal_pose_velocity);
    if (message_arena != submessage_arena) {
      goal_pose_velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, goal_pose_velocity, submessage_arena);
    }
    
  } else {
    
  }
  goal_pose_velocity_ = goal_pose_velocity;
  // @@protoc_insertion_point(field_set_allocated:aisaacpb.RaspiCommand.goal_pose_velocity)
}

// .aisaacpb.Dribble dribble = 3;
inline bool RaspiCommand::_internal_has_dribble() const {
  return this != internal_default_instance() && dribble_ != nullptr;
}
inline bool RaspiCommand::has_dribble() const {
  return _internal_has_dribble();
}
inline void RaspiCommand::clear_dribble() {
  if (GetArena() == nullptr && dribble_ != nullptr) {
    delete dribble_;
  }
  dribble_ = nullptr;
}
inline const ::aisaacpb::Dribble& RaspiCommand::_internal_dribble() const {
  const ::aisaacpb::Dribble* p = dribble_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aisaacpb::Dribble*>(
      &::aisaacpb::_Dribble_default_instance_);
}
inline const ::aisaacpb::Dribble& RaspiCommand::dribble() const {
  // @@protoc_insertion_point(field_get:aisaacpb.RaspiCommand.dribble)
  return _internal_dribble();
}
inline void RaspiCommand::unsafe_arena_set_allocated_dribble(
    ::aisaacpb::Dribble* dribble) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dribble_);
  }
  dribble_ = dribble;
  if (dribble) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aisaacpb.RaspiCommand.dribble)
}
inline ::aisaacpb::Dribble* RaspiCommand::release_dribble() {
  auto temp = unsafe_arena_release_dribble();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aisaacpb::Dribble* RaspiCommand::unsafe_arena_release_dribble() {
  // @@protoc_insertion_point(field_release:aisaacpb.RaspiCommand.dribble)
  
  ::aisaacpb::Dribble* temp = dribble_;
  dribble_ = nullptr;
  return temp;
}
inline ::aisaacpb::Dribble* RaspiCommand::_internal_mutable_dribble() {
  
  if (dribble_ == nullptr) {
    auto* p = CreateMaybeMessage<::aisaacpb::Dribble>(GetArena());
    dribble_ = p;
  }
  return dribble_;
}
inline ::aisaacpb::Dribble* RaspiCommand::mutable_dribble() {
  // @@protoc_insertion_point(field_mutable:aisaacpb.RaspiCommand.dribble)
  return _internal_mutable_dribble();
}
inline void RaspiCommand::set_allocated_dribble(::aisaacpb::Dribble* dribble) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dribble_;
  }
  if (dribble) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dribble);
    if (message_arena != submessage_arena) {
      dribble = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dribble, submessage_arena);
    }
    
  } else {
    
  }
  dribble_ = dribble;
  // @@protoc_insertion_point(field_set_allocated:aisaacpb.RaspiCommand.dribble)
}

// .aisaacpb.Kick kick = 4;
inline bool RaspiCommand::_internal_has_kick() const {
  return this != internal_default_instance() && kick_ != nullptr;
}
inline bool RaspiCommand::has_kick() const {
  return _internal_has_kick();
}
inline void RaspiCommand::clear_kick() {
  if (GetArena() == nullptr && kick_ != nullptr) {
    delete kick_;
  }
  kick_ = nullptr;
}
inline const ::aisaacpb::Kick& RaspiCommand::_internal_kick() const {
  const ::aisaacpb::Kick* p = kick_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aisaacpb::Kick*>(
      &::aisaacpb::_Kick_default_instance_);
}
inline const ::aisaacpb::Kick& RaspiCommand::kick() const {
  // @@protoc_insertion_point(field_get:aisaacpb.RaspiCommand.kick)
  return _internal_kick();
}
inline void RaspiCommand::unsafe_arena_set_allocated_kick(
    ::aisaacpb::Kick* kick) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(kick_);
  }
  kick_ = kick;
  if (kick) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aisaacpb.RaspiCommand.kick)
}
inline ::aisaacpb::Kick* RaspiCommand::release_kick() {
  auto temp = unsafe_arena_release_kick();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aisaacpb::Kick* RaspiCommand::unsafe_arena_release_kick() {
  // @@protoc_insertion_point(field_release:aisaacpb.RaspiCommand.kick)
  
  ::aisaacpb::Kick* temp = kick_;
  kick_ = nullptr;
  return temp;
}
inline ::aisaacpb::Kick* RaspiCommand::_internal_mutable_kick() {
  
  if (kick_ == nullptr) {
    auto* p = CreateMaybeMessage<::aisaacpb::Kick>(GetArena());
    kick_ = p;
  }
  return kick_;
}
inline ::aisaacpb::Kick* RaspiCommand::mutable_kick() {
  // @@protoc_insertion_point(field_mutable:aisaacpb.RaspiCommand.kick)
  return _internal_mutable_kick();
}
inline void RaspiCommand::set_allocated_kick(::aisaacpb::Kick* kick) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete kick_;
  }
  if (kick) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(kick);
    if (message_arena != submessage_arena) {
      kick = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, kick, submessage_arena);
    }
    
  } else {
    
  }
  kick_ = kick;
  // @@protoc_insertion_point(field_set_allocated:aisaacpb.RaspiCommand.kick)
}

// -------------------------------------------------------------------

// VisionData

// .aisaacpb.Position own_machine_position = 1;
inline bool VisionData::_internal_has_own_machine_position() const {
  return this != internal_default_instance() && own_machine_position_ != nullptr;
}
inline bool VisionData::has_own_machine_position() const {
  return _internal_has_own_machine_position();
}
inline void VisionData::clear_own_machine_position() {
  if (GetArena() == nullptr && own_machine_position_ != nullptr) {
    delete own_machine_position_;
  }
  own_machine_position_ = nullptr;
}
inline const ::aisaacpb::Position& VisionData::_internal_own_machine_position() const {
  const ::aisaacpb::Position* p = own_machine_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aisaacpb::Position*>(
      &::aisaacpb::_Position_default_instance_);
}
inline const ::aisaacpb::Position& VisionData::own_machine_position() const {
  // @@protoc_insertion_point(field_get:aisaacpb.VisionData.own_machine_position)
  return _internal_own_machine_position();
}
inline void VisionData::unsafe_arena_set_allocated_own_machine_position(
    ::aisaacpb::Position* own_machine_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(own_machine_position_);
  }
  own_machine_position_ = own_machine_position;
  if (own_machine_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aisaacpb.VisionData.own_machine_position)
}
inline ::aisaacpb::Position* VisionData::release_own_machine_position() {
  auto temp = unsafe_arena_release_own_machine_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aisaacpb::Position* VisionData::unsafe_arena_release_own_machine_position() {
  // @@protoc_insertion_point(field_release:aisaacpb.VisionData.own_machine_position)
  
  ::aisaacpb::Position* temp = own_machine_position_;
  own_machine_position_ = nullptr;
  return temp;
}
inline ::aisaacpb::Position* VisionData::_internal_mutable_own_machine_position() {
  
  if (own_machine_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::aisaacpb::Position>(GetArena());
    own_machine_position_ = p;
  }
  return own_machine_position_;
}
inline ::aisaacpb::Position* VisionData::mutable_own_machine_position() {
  // @@protoc_insertion_point(field_mutable:aisaacpb.VisionData.own_machine_position)
  return _internal_mutable_own_machine_position();
}
inline void VisionData::set_allocated_own_machine_position(::aisaacpb::Position* own_machine_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete own_machine_position_;
  }
  if (own_machine_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(own_machine_position);
    if (message_arena != submessage_arena) {
      own_machine_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, own_machine_position, submessage_arena);
    }
    
  } else {
    
  }
  own_machine_position_ = own_machine_position;
  // @@protoc_insertion_point(field_set_allocated:aisaacpb.VisionData.own_machine_position)
}

// .aisaacpb.Position ball_position = 2;
inline bool VisionData::_internal_has_ball_position() const {
  return this != internal_default_instance() && ball_position_ != nullptr;
}
inline bool VisionData::has_ball_position() const {
  return _internal_has_ball_position();
}
inline void VisionData::clear_ball_position() {
  if (GetArena() == nullptr && ball_position_ != nullptr) {
    delete ball_position_;
  }
  ball_position_ = nullptr;
}
inline const ::aisaacpb::Position& VisionData::_internal_ball_position() const {
  const ::aisaacpb::Position* p = ball_position_;
  return p != nullptr ? *p : *reinterpret_cast<const ::aisaacpb::Position*>(
      &::aisaacpb::_Position_default_instance_);
}
inline const ::aisaacpb::Position& VisionData::ball_position() const {
  // @@protoc_insertion_point(field_get:aisaacpb.VisionData.ball_position)
  return _internal_ball_position();
}
inline void VisionData::unsafe_arena_set_allocated_ball_position(
    ::aisaacpb::Position* ball_position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ball_position_);
  }
  ball_position_ = ball_position;
  if (ball_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:aisaacpb.VisionData.ball_position)
}
inline ::aisaacpb::Position* VisionData::release_ball_position() {
  auto temp = unsafe_arena_release_ball_position();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::aisaacpb::Position* VisionData::unsafe_arena_release_ball_position() {
  // @@protoc_insertion_point(field_release:aisaacpb.VisionData.ball_position)
  
  ::aisaacpb::Position* temp = ball_position_;
  ball_position_ = nullptr;
  return temp;
}
inline ::aisaacpb::Position* VisionData::_internal_mutable_ball_position() {
  
  if (ball_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::aisaacpb::Position>(GetArena());
    ball_position_ = p;
  }
  return ball_position_;
}
inline ::aisaacpb::Position* VisionData::mutable_ball_position() {
  // @@protoc_insertion_point(field_mutable:aisaacpb.VisionData.ball_position)
  return _internal_mutable_ball_position();
}
inline void VisionData::set_allocated_ball_position(::aisaacpb::Position* ball_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ball_position_;
  }
  if (ball_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ball_position);
    if (message_arena != submessage_arena) {
      ball_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ball_position, submessage_arena);
    }
    
  } else {
    
  }
  ball_position_ = ball_position;
  // @@protoc_insertion_point(field_set_allocated:aisaacpb.VisionData.ball_position)
}

// repeated .aisaacpb.Obstacle obstacles = 3;
inline int VisionData::_internal_obstacles_size() const {
  return obstacles_.size();
}
inline int VisionData::obstacles_size() const {
  return _internal_obstacles_size();
}
inline void VisionData::clear_obstacles() {
  obstacles_.Clear();
}
inline ::aisaacpb::Obstacle* VisionData::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:aisaacpb.VisionData.obstacles)
  return obstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aisaacpb::Obstacle >*
VisionData::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:aisaacpb.VisionData.obstacles)
  return &obstacles_;
}
inline const ::aisaacpb::Obstacle& VisionData::_internal_obstacles(int index) const {
  return obstacles_.Get(index);
}
inline const ::aisaacpb::Obstacle& VisionData::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:aisaacpb.VisionData.obstacles)
  return _internal_obstacles(index);
}
inline ::aisaacpb::Obstacle* VisionData::_internal_add_obstacles() {
  return obstacles_.Add();
}
inline ::aisaacpb::Obstacle* VisionData::add_obstacles() {
  // @@protoc_insertion_point(field_add:aisaacpb.VisionData.obstacles)
  return _internal_add_obstacles();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::aisaacpb::Obstacle >&
VisionData::obstacles() const {
  // @@protoc_insertion_point(field_list:aisaacpb.VisionData.obstacles)
  return obstacles_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace aisaacpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::aisaacpb::Kick_KickType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aisaacpb::Kick_KickType>() {
  return ::aisaacpb::Kick_KickType_descriptor();
}
template <> struct is_proto_enum< ::aisaacpb::Kick_KickMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aisaacpb::Kick_KickMethod>() {
  return ::aisaacpb::Kick_KickMethod_descriptor();
}
template <> struct is_proto_enum< ::aisaacpb::RobotCommandCoordinateSystemType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::aisaacpb::RobotCommandCoordinateSystemType>() {
  return ::aisaacpb::RobotCommandCoordinateSystemType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_aisaaccommand_2eproto
