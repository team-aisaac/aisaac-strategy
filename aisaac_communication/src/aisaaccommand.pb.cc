// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aisaaccommand.proto

#include "aisaaccommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_aisaaccommand_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_aisaaccommand_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Obstacle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_aisaaccommand_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Position;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_aisaaccommand_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Velocity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_aisaaccommand_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Dribble;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_aisaaccommand_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Kick;
}  // namespace protobuf_aisaaccommand_2eproto
namespace aisaacpb {
class PositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Position>
      _instance;
} _Position_default_instance_;
class VelocityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Velocity>
      _instance;
} _Velocity_default_instance_;
class AccelerationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Acceleration>
      _instance;
} _Acceleration_default_instance_;
class ObstacleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Obstacle>
      _instance;
} _Obstacle_default_instance_;
class KickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Kick>
      _instance;
} _Kick_default_instance_;
class DribbleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Dribble>
      _instance;
} _Dribble_default_instance_;
class SpcCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SpcCommand>
      _instance;
} _SpcCommand_default_instance_;
class RaspiCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RaspiCommand>
      _instance;
} _RaspiCommand_default_instance_;
class VisionDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VisionData>
      _instance;
} _VisionData_default_instance_;
}  // namespace aisaacpb
namespace protobuf_aisaaccommand_2eproto {
static void InitDefaultsPosition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_Position_default_instance_;
    new (ptr) ::aisaacpb::Position();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::Position::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Position =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPosition}, {}};

static void InitDefaultsVelocity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_Velocity_default_instance_;
    new (ptr) ::aisaacpb::Velocity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::Velocity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Velocity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVelocity}, {}};

static void InitDefaultsAcceleration() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_Acceleration_default_instance_;
    new (ptr) ::aisaacpb::Acceleration();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::Acceleration::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Acceleration =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAcceleration}, {}};

static void InitDefaultsObstacle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_Obstacle_default_instance_;
    new (ptr) ::aisaacpb::Obstacle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::Obstacle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Obstacle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsObstacle}, {}};

static void InitDefaultsKick() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_Kick_default_instance_;
    new (ptr) ::aisaacpb::Kick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::Kick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Kick =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsKick}, {
      &protobuf_aisaaccommand_2eproto::scc_info_Position.base,}};

static void InitDefaultsDribble() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_Dribble_default_instance_;
    new (ptr) ::aisaacpb::Dribble();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::Dribble::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Dribble =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDribble}, {
      &protobuf_aisaaccommand_2eproto::scc_info_Position.base,}};

static void InitDefaultsSpcCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_SpcCommand_default_instance_;
    new (ptr) ::aisaacpb::SpcCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::SpcCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SpcCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSpcCommand}, {
      &protobuf_aisaaccommand_2eproto::scc_info_Position.base,
      &protobuf_aisaaccommand_2eproto::scc_info_Dribble.base,
      &protobuf_aisaaccommand_2eproto::scc_info_Kick.base,}};

static void InitDefaultsRaspiCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_RaspiCommand_default_instance_;
    new (ptr) ::aisaacpb::RaspiCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::RaspiCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RaspiCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRaspiCommand}, {
      &protobuf_aisaaccommand_2eproto::scc_info_Velocity.base,
      &protobuf_aisaaccommand_2eproto::scc_info_Dribble.base,
      &protobuf_aisaaccommand_2eproto::scc_info_Kick.base,}};

static void InitDefaultsVisionData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_VisionData_default_instance_;
    new (ptr) ::aisaacpb::VisionData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::VisionData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_VisionData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsVisionData}, {
      &protobuf_aisaaccommand_2eproto::scc_info_Position.base,
      &protobuf_aisaaccommand_2eproto::scc_info_Obstacle.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Position.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Velocity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Acceleration.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Obstacle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Kick.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Dribble.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SpcCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RaspiCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VisionData.base);
}

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Position, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Position, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Position, theta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Velocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Velocity, vx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Velocity, vy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Velocity, omega_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Acceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Acceleration, ax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Acceleration, ay_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Obstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Obstacle, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Obstacle, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Obstacle, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Obstacle, vx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Obstacle, vy_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Kick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Kick, sensor_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Kick, kick_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Kick, kick_power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Kick, ball_kick_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Kick, free_kick_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Kick, ball_goal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Kick, ball_target_allowable_error_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Dribble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Dribble, dribble_power_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Dribble, dribble_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Dribble, dribbler_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Dribble, dribble_goal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::Dribble, dribble_complete_distance_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::SpcCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::SpcCommand, robot_command_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::SpcCommand, goal_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::SpcCommand, prohibited_zone_ignore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::SpcCommand, middle_target_flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::SpcCommand, middle_goal_pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::SpcCommand, dribble_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::SpcCommand, kick_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::RaspiCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::RaspiCommand, robot_command_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::RaspiCommand, goal_pose_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::RaspiCommand, dribble_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::RaspiCommand, kick_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::VisionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::VisionData, own_machine_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::VisionData, ball_position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::aisaacpb::VisionData, obstacles_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::aisaacpb::Position)},
  { 8, -1, sizeof(::aisaacpb::Velocity)},
  { 16, -1, sizeof(::aisaacpb::Acceleration)},
  { 23, -1, sizeof(::aisaacpb::Obstacle)},
  { 33, -1, sizeof(::aisaacpb::Kick)},
  { 45, -1, sizeof(::aisaacpb::Dribble)},
  { 55, -1, sizeof(::aisaacpb::SpcCommand)},
  { 67, -1, sizeof(::aisaacpb::RaspiCommand)},
  { 76, -1, sizeof(::aisaacpb::VisionData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::aisaacpb::_Position_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aisaacpb::_Velocity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aisaacpb::_Acceleration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aisaacpb::_Obstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aisaacpb::_Kick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aisaacpb::_Dribble_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aisaacpb::_SpcCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aisaacpb::_RaspiCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::aisaacpb::_VisionData_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "aisaaccommand.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023aisaaccommand.proto\022\010aisaacpb\"/\n\010Posit"
      "ion\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005theta\030\003 \001(\005"
      "\"1\n\010Velocity\022\n\n\002vx\030\001 \001(\005\022\n\n\002vy\030\002 \001(\005\022\r\n\005"
      "omega\030\003 \001(\005\"&\n\014Acceleration\022\n\n\002ax\030\001 \001(\005\022"
      "\n\n\002ay\030\002 \001(\005\"G\n\010Obstacle\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030"
      "\002 \001(\005\022\r\n\005theta\030\003 \001(\005\022\n\n\002vx\030\004 \001(\005\022\n\n\002vy\030\005"
      " \001(\005\"\321\002\n\004Kick\022,\n\013sensor_type\030\001 \001(\0162\027.ais"
      "aacpb.Kick.KickType\022.\n\013kick_method\030\002 \001(\016"
      "2\031.aisaacpb.Kick.KickMethod\022\022\n\nkick_powe"
      "r\030\003 \001(\005\022\030\n\020ball_kick_active\030\004 \001(\010\022\026\n\016fre"
      "e_kick_flag\030\005 \001(\010\022%\n\tball_goal\030\006 \001(\0132\022.a"
      "isaacpb.Position\022#\n\033ball_target_allowabl"
      "e_error\030\007 \001(\005\"3\n\010KickType\022\010\n\004None\020\000\022\t\n\005F"
      "orce\020\001\022\n\n\006Sensor\020\002\022\006\n\002XY\020\003\"$\n\nKickMethod"
      "\022\010\n\004Chip\020\000\022\014\n\010Straight\020\001\"\235\001\n\007Dribble\022\025\n\r"
      "dribble_power\030\001 \001(\001\022\025\n\rdribble_state\030\002 \001"
      "(\010\022\027\n\017dribbler_active\030\003 \001(\010\022(\n\014dribble_g"
      "oal\030\004 \001(\0132\022.aisaacpb.Position\022!\n\031dribble"
      "_complete_distance\030\005 \001(\005\"\247\002\n\nSpcCommand\022"
      "F\n\022robot_command_type\030\001 \001(\0162*.aisaacpb.R"
      "obotCommandCoordinateSystemType\022%\n\tgoal_"
      "pose\030\002 \001(\0132\022.aisaacpb.Position\022\036\n\026prohib"
      "ited_zone_ignore\030\003 \001(\010\022\032\n\022middle_target_"
      "flag\030\004 \001(\010\022,\n\020middle_goal_pose\030\005 \001(\0132\022.a"
      "isaacpb.Position\022\"\n\007dribble\030\006 \001(\0132\021.aisa"
      "acpb.Dribble\022\034\n\004kick\030\007 \001(\0132\016.aisaacpb.Ki"
      "ck\"\310\001\n\014RaspiCommand\022F\n\022robot_command_typ"
      "e\030\001 \001(\0162*.aisaacpb.RobotCommandCoordinat"
      "eSystemType\022.\n\022goal_pose_velocity\030\002 \001(\0132"
      "\022.aisaacpb.Velocity\022\"\n\007dribble\030\003 \001(\0132\021.a"
      "isaacpb.Dribble\022\034\n\004kick\030\004 \001(\0132\016.aisaacpb"
      ".Kick\"\220\001\n\nVisionData\0220\n\024own_machine_posi"
      "tion\030\001 \001(\0132\022.aisaacpb.Position\022)\n\rball_p"
      "osition\030\002 \001(\0132\022.aisaacpb.Position\022%\n\tobs"
      "tacles\030\003 \003(\0132\022.aisaacpb.Obstacle*I\n Robo"
      "tCommandCoordinateSystemType\022\n\n\006Vector\020\000"
      "\022\016\n\nCoordinate\020\001\022\t\n\005Relax\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1475);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "aisaaccommand.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_aisaaccommand_2eproto
namespace aisaacpb {
const ::google::protobuf::EnumDescriptor* Kick_KickType_descriptor() {
  protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aisaaccommand_2eproto::file_level_enum_descriptors[0];
}
bool Kick_KickType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Kick_KickType Kick::None;
const Kick_KickType Kick::Force;
const Kick_KickType Kick::Sensor;
const Kick_KickType Kick::XY;
const Kick_KickType Kick::KickType_MIN;
const Kick_KickType Kick::KickType_MAX;
const int Kick::KickType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Kick_KickMethod_descriptor() {
  protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aisaaccommand_2eproto::file_level_enum_descriptors[1];
}
bool Kick_KickMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Kick_KickMethod Kick::Chip;
const Kick_KickMethod Kick::Straight;
const Kick_KickMethod Kick::KickMethod_MIN;
const Kick_KickMethod Kick::KickMethod_MAX;
const int Kick::KickMethod_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* RobotCommandCoordinateSystemType_descriptor() {
  protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_aisaaccommand_2eproto::file_level_enum_descriptors[2];
}
bool RobotCommandCoordinateSystemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Position::kXFieldNumber;
const int Position::kYFieldNumber;
const int Position::kThetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Position::Position()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_aisaaccommand_2eproto::scc_info_Position.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aisaacpb.Position)
}
Position::Position(const Position& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&theta_) -
    reinterpret_cast<char*>(&x_)) + sizeof(theta_));
  // @@protoc_insertion_point(copy_constructor:aisaacpb.Position)
}

void Position::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&x_)) + sizeof(theta_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:aisaacpb.Position)
  SharedDtor();
}

void Position::SharedDtor() {
}

void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Position::descriptor() {
  ::protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Position& Position::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_aisaaccommand_2eproto::scc_info_Position.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&x_)) + sizeof(theta_));
  _internal_metadata_.Clear();
}

bool Position::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aisaacpb.Position)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 theta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aisaacpb.Position)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aisaacpb.Position)
  return false;
#undef DO_
}

void Position::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aisaacpb.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // int32 theta = 3;
  if (this->theta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->theta(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:aisaacpb.Position)
}

::google::protobuf::uint8* Position::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.Position)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // int32 theta = 3;
  if (this->theta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->theta(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.Position)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // int32 theta = 3;
  if (this->theta() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->theta());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Position>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.Position)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.theta() != 0) {
    set_theta(from.theta());
  }
}

void Position::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::Swap(Position* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Position::InternalSwap(Position* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(theta_, other->theta_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Position::GetMetadata() const {
  protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Velocity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Velocity::kVxFieldNumber;
const int Velocity::kVyFieldNumber;
const int Velocity::kOmegaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Velocity::Velocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_aisaaccommand_2eproto::scc_info_Velocity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aisaacpb.Velocity)
}
Velocity::Velocity(const Velocity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&vx_, &from.vx_,
    static_cast<size_t>(reinterpret_cast<char*>(&omega_) -
    reinterpret_cast<char*>(&vx_)) + sizeof(omega_));
  // @@protoc_insertion_point(copy_constructor:aisaacpb.Velocity)
}

void Velocity::SharedCtor() {
  ::memset(&vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&omega_) -
      reinterpret_cast<char*>(&vx_)) + sizeof(omega_));
}

Velocity::~Velocity() {
  // @@protoc_insertion_point(destructor:aisaacpb.Velocity)
  SharedDtor();
}

void Velocity::SharedDtor() {
}

void Velocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Velocity::descriptor() {
  ::protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Velocity& Velocity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_aisaaccommand_2eproto::scc_info_Velocity.base);
  return *internal_default_instance();
}


void Velocity::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.Velocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&omega_) -
      reinterpret_cast<char*>(&vx_)) + sizeof(omega_));
  _internal_metadata_.Clear();
}

bool Velocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aisaacpb.Velocity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 vx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vy = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 omega = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &omega_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aisaacpb.Velocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aisaacpb.Velocity)
  return false;
#undef DO_
}

void Velocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aisaacpb.Velocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vx = 1;
  if (this->vx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vx(), output);
  }

  // int32 vy = 2;
  if (this->vy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vy(), output);
  }

  // int32 omega = 3;
  if (this->omega() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->omega(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:aisaacpb.Velocity)
}

::google::protobuf::uint8* Velocity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.Velocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vx = 1;
  if (this->vx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vx(), target);
  }

  // int32 vy = 2;
  if (this->vy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vy(), target);
  }

  // int32 omega = 3;
  if (this->omega() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->omega(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.Velocity)
  return target;
}

size_t Velocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.Velocity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 vx = 1;
  if (this->vx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vx());
  }

  // int32 vy = 2;
  if (this->vy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vy());
  }

  // int32 omega = 3;
  if (this->omega() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->omega());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Velocity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  const Velocity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Velocity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.Velocity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.Velocity)
    MergeFrom(*source);
  }
}

void Velocity::MergeFrom(const Velocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vx() != 0) {
    set_vx(from.vx());
  }
  if (from.vy() != 0) {
    set_vy(from.vy());
  }
  if (from.omega() != 0) {
    set_omega(from.omega());
  }
}

void Velocity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Velocity::CopyFrom(const Velocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Velocity::IsInitialized() const {
  return true;
}

void Velocity::Swap(Velocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Velocity::InternalSwap(Velocity* other) {
  using std::swap;
  swap(vx_, other->vx_);
  swap(vy_, other->vy_);
  swap(omega_, other->omega_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Velocity::GetMetadata() const {
  protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Acceleration::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Acceleration::kAxFieldNumber;
const int Acceleration::kAyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Acceleration::Acceleration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_aisaaccommand_2eproto::scc_info_Acceleration.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aisaacpb.Acceleration)
}
Acceleration::Acceleration(const Acceleration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ax_, &from.ax_,
    static_cast<size_t>(reinterpret_cast<char*>(&ay_) -
    reinterpret_cast<char*>(&ax_)) + sizeof(ay_));
  // @@protoc_insertion_point(copy_constructor:aisaacpb.Acceleration)
}

void Acceleration::SharedCtor() {
  ::memset(&ax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ay_) -
      reinterpret_cast<char*>(&ax_)) + sizeof(ay_));
}

Acceleration::~Acceleration() {
  // @@protoc_insertion_point(destructor:aisaacpb.Acceleration)
  SharedDtor();
}

void Acceleration::SharedDtor() {
}

void Acceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Acceleration::descriptor() {
  ::protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Acceleration& Acceleration::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_aisaaccommand_2eproto::scc_info_Acceleration.base);
  return *internal_default_instance();
}


void Acceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.Acceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ay_) -
      reinterpret_cast<char*>(&ax_)) + sizeof(ay_));
  _internal_metadata_.Clear();
}

bool Acceleration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aisaacpb.Acceleration)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 ax = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ay = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aisaacpb.Acceleration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aisaacpb.Acceleration)
  return false;
#undef DO_
}

void Acceleration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aisaacpb.Acceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ax = 1;
  if (this->ax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ax(), output);
  }

  // int32 ay = 2;
  if (this->ay() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ay(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:aisaacpb.Acceleration)
}

::google::protobuf::uint8* Acceleration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.Acceleration)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ax = 1;
  if (this->ax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ax(), target);
  }

  // int32 ay = 2;
  if (this->ay() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ay(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.Acceleration)
  return target;
}

size_t Acceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.Acceleration)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 ax = 1;
  if (this->ax() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ax());
  }

  // int32 ay = 2;
  if (this->ay() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ay());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Acceleration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.Acceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const Acceleration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Acceleration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.Acceleration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.Acceleration)
    MergeFrom(*source);
  }
}

void Acceleration::MergeFrom(const Acceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.Acceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ax() != 0) {
    set_ax(from.ax());
  }
  if (from.ay() != 0) {
    set_ay(from.ay());
  }
}

void Acceleration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.Acceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acceleration::CopyFrom(const Acceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.Acceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acceleration::IsInitialized() const {
  return true;
}

void Acceleration::Swap(Acceleration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Acceleration::InternalSwap(Acceleration* other) {
  using std::swap;
  swap(ax_, other->ax_);
  swap(ay_, other->ay_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Acceleration::GetMetadata() const {
  protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Obstacle::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Obstacle::kXFieldNumber;
const int Obstacle::kYFieldNumber;
const int Obstacle::kThetaFieldNumber;
const int Obstacle::kVxFieldNumber;
const int Obstacle::kVyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Obstacle::Obstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_aisaaccommand_2eproto::scc_info_Obstacle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aisaacpb.Obstacle)
}
Obstacle::Obstacle(const Obstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&vy_) -
    reinterpret_cast<char*>(&x_)) + sizeof(vy_));
  // @@protoc_insertion_point(copy_constructor:aisaacpb.Obstacle)
}

void Obstacle::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vy_) -
      reinterpret_cast<char*>(&x_)) + sizeof(vy_));
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:aisaacpb.Obstacle)
  SharedDtor();
}

void Obstacle::SharedDtor() {
}

void Obstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Obstacle::descriptor() {
  ::protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Obstacle& Obstacle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_aisaaccommand_2eproto::scc_info_Obstacle.base);
  return *internal_default_instance();
}


void Obstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.Obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vy_) -
      reinterpret_cast<char*>(&x_)) + sizeof(vy_));
  _internal_metadata_.Clear();
}

bool Obstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aisaacpb.Obstacle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 theta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vx = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 vy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aisaacpb.Obstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aisaacpb.Obstacle)
  return false;
#undef DO_
}

void Obstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aisaacpb.Obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // int32 theta = 3;
  if (this->theta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->theta(), output);
  }

  // int32 vx = 4;
  if (this->vx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vx(), output);
  }

  // int32 vy = 5;
  if (this->vy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vy(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:aisaacpb.Obstacle)
}

::google::protobuf::uint8* Obstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.Obstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  // int32 theta = 3;
  if (this->theta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->theta(), target);
  }

  // int32 vx = 4;
  if (this->vx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vx(), target);
  }

  // int32 vy = 5;
  if (this->vy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vy(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.Obstacle)
  return target;
}

size_t Obstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.Obstacle)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // int32 theta = 3;
  if (this->theta() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->theta());
  }

  // int32 vx = 4;
  if (this->vx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vx());
  }

  // int32 vy = 5;
  if (this->vy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->vy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Obstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.Obstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.Obstacle)
    MergeFrom(*source);
  }
}

void Obstacle::MergeFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.theta() != 0) {
    set_theta(from.theta());
  }
  if (from.vx() != 0) {
    set_vx(from.vx());
  }
  if (from.vy() != 0) {
    set_vy(from.vy());
  }
}

void Obstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle::CopyFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  return true;
}

void Obstacle::Swap(Obstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Obstacle::InternalSwap(Obstacle* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(theta_, other->theta_);
  swap(vx_, other->vx_);
  swap(vy_, other->vy_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Obstacle::GetMetadata() const {
  protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Kick::InitAsDefaultInstance() {
  ::aisaacpb::_Kick_default_instance_._instance.get_mutable()->ball_goal_ = const_cast< ::aisaacpb::Position*>(
      ::aisaacpb::Position::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Kick::kSensorTypeFieldNumber;
const int Kick::kKickMethodFieldNumber;
const int Kick::kKickPowerFieldNumber;
const int Kick::kBallKickActiveFieldNumber;
const int Kick::kFreeKickFlagFieldNumber;
const int Kick::kBallGoalFieldNumber;
const int Kick::kBallTargetAllowableErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Kick::Kick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_aisaaccommand_2eproto::scc_info_Kick.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aisaacpb.Kick)
}
Kick::Kick(const Kick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ball_goal()) {
    ball_goal_ = new ::aisaacpb::Position(*from.ball_goal_);
  } else {
    ball_goal_ = NULL;
  }
  ::memcpy(&sensor_type_, &from.sensor_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&ball_target_allowable_error_) -
    reinterpret_cast<char*>(&sensor_type_)) + sizeof(ball_target_allowable_error_));
  // @@protoc_insertion_point(copy_constructor:aisaacpb.Kick)
}

void Kick::SharedCtor() {
  ::memset(&ball_goal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ball_target_allowable_error_) -
      reinterpret_cast<char*>(&ball_goal_)) + sizeof(ball_target_allowable_error_));
}

Kick::~Kick() {
  // @@protoc_insertion_point(destructor:aisaacpb.Kick)
  SharedDtor();
}

void Kick::SharedDtor() {
  if (this != internal_default_instance()) delete ball_goal_;
}

void Kick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Kick::descriptor() {
  ::protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Kick& Kick::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_aisaaccommand_2eproto::scc_info_Kick.base);
  return *internal_default_instance();
}


void Kick::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.Kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && ball_goal_ != NULL) {
    delete ball_goal_;
  }
  ball_goal_ = NULL;
  ::memset(&sensor_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ball_target_allowable_error_) -
      reinterpret_cast<char*>(&sensor_type_)) + sizeof(ball_target_allowable_error_));
  _internal_metadata_.Clear();
}

bool Kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aisaacpb.Kick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aisaacpb.Kick.KickType sensor_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sensor_type(static_cast< ::aisaacpb::Kick_KickType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aisaacpb.Kick.KickMethod kick_method = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kick_method(static_cast< ::aisaacpb::Kick_KickMethod >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 kick_power = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kick_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ball_kick_active = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ball_kick_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool free_kick_flag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &free_kick_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aisaacpb.Position ball_goal = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ball_goal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ball_target_allowable_error = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ball_target_allowable_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aisaacpb.Kick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aisaacpb.Kick)
  return false;
#undef DO_
}

void Kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aisaacpb.Kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aisaacpb.Kick.KickType sensor_type = 1;
  if (this->sensor_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->sensor_type(), output);
  }

  // .aisaacpb.Kick.KickMethod kick_method = 2;
  if (this->kick_method() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->kick_method(), output);
  }

  // int32 kick_power = 3;
  if (this->kick_power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kick_power(), output);
  }

  // bool ball_kick_active = 4;
  if (this->ball_kick_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ball_kick_active(), output);
  }

  // bool free_kick_flag = 5;
  if (this->free_kick_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->free_kick_flag(), output);
  }

  // .aisaacpb.Position ball_goal = 6;
  if (this->has_ball_goal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_ball_goal(), output);
  }

  // int32 ball_target_allowable_error = 7;
  if (this->ball_target_allowable_error() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ball_target_allowable_error(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:aisaacpb.Kick)
}

::google::protobuf::uint8* Kick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.Kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aisaacpb.Kick.KickType sensor_type = 1;
  if (this->sensor_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->sensor_type(), target);
  }

  // .aisaacpb.Kick.KickMethod kick_method = 2;
  if (this->kick_method() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->kick_method(), target);
  }

  // int32 kick_power = 3;
  if (this->kick_power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kick_power(), target);
  }

  // bool ball_kick_active = 4;
  if (this->ball_kick_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ball_kick_active(), target);
  }

  // bool free_kick_flag = 5;
  if (this->free_kick_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->free_kick_flag(), target);
  }

  // .aisaacpb.Position ball_goal = 6;
  if (this->has_ball_goal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_ball_goal(), deterministic, target);
  }

  // int32 ball_target_allowable_error = 7;
  if (this->ball_target_allowable_error() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ball_target_allowable_error(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.Kick)
  return target;
}

size_t Kick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.Kick)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .aisaacpb.Position ball_goal = 6;
  if (this->has_ball_goal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ball_goal_);
  }

  // .aisaacpb.Kick.KickType sensor_type = 1;
  if (this->sensor_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sensor_type());
  }

  // .aisaacpb.Kick.KickMethod kick_method = 2;
  if (this->kick_method() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kick_method());
  }

  // int32 kick_power = 3;
  if (this->kick_power() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kick_power());
  }

  // bool ball_kick_active = 4;
  if (this->ball_kick_active() != 0) {
    total_size += 1 + 1;
  }

  // bool free_kick_flag = 5;
  if (this->free_kick_flag() != 0) {
    total_size += 1 + 1;
  }

  // int32 ball_target_allowable_error = 7;
  if (this->ball_target_allowable_error() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ball_target_allowable_error());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Kick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.Kick)
  GOOGLE_DCHECK_NE(&from, this);
  const Kick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Kick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.Kick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.Kick)
    MergeFrom(*source);
  }
}

void Kick::MergeFrom(const Kick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.Kick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ball_goal()) {
    mutable_ball_goal()->::aisaacpb::Position::MergeFrom(from.ball_goal());
  }
  if (from.sensor_type() != 0) {
    set_sensor_type(from.sensor_type());
  }
  if (from.kick_method() != 0) {
    set_kick_method(from.kick_method());
  }
  if (from.kick_power() != 0) {
    set_kick_power(from.kick_power());
  }
  if (from.ball_kick_active() != 0) {
    set_ball_kick_active(from.ball_kick_active());
  }
  if (from.free_kick_flag() != 0) {
    set_free_kick_flag(from.free_kick_flag());
  }
  if (from.ball_target_allowable_error() != 0) {
    set_ball_target_allowable_error(from.ball_target_allowable_error());
  }
}

void Kick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.Kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kick::CopyFrom(const Kick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.Kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kick::IsInitialized() const {
  return true;
}

void Kick::Swap(Kick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Kick::InternalSwap(Kick* other) {
  using std::swap;
  swap(ball_goal_, other->ball_goal_);
  swap(sensor_type_, other->sensor_type_);
  swap(kick_method_, other->kick_method_);
  swap(kick_power_, other->kick_power_);
  swap(ball_kick_active_, other->ball_kick_active_);
  swap(free_kick_flag_, other->free_kick_flag_);
  swap(ball_target_allowable_error_, other->ball_target_allowable_error_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Kick::GetMetadata() const {
  protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Dribble::InitAsDefaultInstance() {
  ::aisaacpb::_Dribble_default_instance_._instance.get_mutable()->dribble_goal_ = const_cast< ::aisaacpb::Position*>(
      ::aisaacpb::Position::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dribble::kDribblePowerFieldNumber;
const int Dribble::kDribbleStateFieldNumber;
const int Dribble::kDribblerActiveFieldNumber;
const int Dribble::kDribbleGoalFieldNumber;
const int Dribble::kDribbleCompleteDistanceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dribble::Dribble()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_aisaaccommand_2eproto::scc_info_Dribble.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aisaacpb.Dribble)
}
Dribble::Dribble(const Dribble& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_dribble_goal()) {
    dribble_goal_ = new ::aisaacpb::Position(*from.dribble_goal_);
  } else {
    dribble_goal_ = NULL;
  }
  ::memcpy(&dribble_power_, &from.dribble_power_,
    static_cast<size_t>(reinterpret_cast<char*>(&dribble_complete_distance_) -
    reinterpret_cast<char*>(&dribble_power_)) + sizeof(dribble_complete_distance_));
  // @@protoc_insertion_point(copy_constructor:aisaacpb.Dribble)
}

void Dribble::SharedCtor() {
  ::memset(&dribble_goal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dribble_complete_distance_) -
      reinterpret_cast<char*>(&dribble_goal_)) + sizeof(dribble_complete_distance_));
}

Dribble::~Dribble() {
  // @@protoc_insertion_point(destructor:aisaacpb.Dribble)
  SharedDtor();
}

void Dribble::SharedDtor() {
  if (this != internal_default_instance()) delete dribble_goal_;
}

void Dribble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Dribble::descriptor() {
  ::protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Dribble& Dribble::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_aisaaccommand_2eproto::scc_info_Dribble.base);
  return *internal_default_instance();
}


void Dribble::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.Dribble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && dribble_goal_ != NULL) {
    delete dribble_goal_;
  }
  dribble_goal_ = NULL;
  ::memset(&dribble_power_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dribble_complete_distance_) -
      reinterpret_cast<char*>(&dribble_power_)) + sizeof(dribble_complete_distance_));
  _internal_metadata_.Clear();
}

bool Dribble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aisaacpb.Dribble)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double dribble_power = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dribble_power_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dribble_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dribble_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dribbler_active = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dribbler_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aisaacpb.Position dribble_goal = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dribble_goal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dribble_complete_distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dribble_complete_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aisaacpb.Dribble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aisaacpb.Dribble)
  return false;
#undef DO_
}

void Dribble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aisaacpb.Dribble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dribble_power = 1;
  if (this->dribble_power() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dribble_power(), output);
  }

  // bool dribble_state = 2;
  if (this->dribble_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->dribble_state(), output);
  }

  // bool dribbler_active = 3;
  if (this->dribbler_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->dribbler_active(), output);
  }

  // .aisaacpb.Position dribble_goal = 4;
  if (this->has_dribble_goal()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_dribble_goal(), output);
  }

  // int32 dribble_complete_distance = 5;
  if (this->dribble_complete_distance() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dribble_complete_distance(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:aisaacpb.Dribble)
}

::google::protobuf::uint8* Dribble::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.Dribble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dribble_power = 1;
  if (this->dribble_power() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dribble_power(), target);
  }

  // bool dribble_state = 2;
  if (this->dribble_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->dribble_state(), target);
  }

  // bool dribbler_active = 3;
  if (this->dribbler_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->dribbler_active(), target);
  }

  // .aisaacpb.Position dribble_goal = 4;
  if (this->has_dribble_goal()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_dribble_goal(), deterministic, target);
  }

  // int32 dribble_complete_distance = 5;
  if (this->dribble_complete_distance() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dribble_complete_distance(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.Dribble)
  return target;
}

size_t Dribble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.Dribble)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .aisaacpb.Position dribble_goal = 4;
  if (this->has_dribble_goal()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dribble_goal_);
  }

  // double dribble_power = 1;
  if (this->dribble_power() != 0) {
    total_size += 1 + 8;
  }

  // bool dribble_state = 2;
  if (this->dribble_state() != 0) {
    total_size += 1 + 1;
  }

  // bool dribbler_active = 3;
  if (this->dribbler_active() != 0) {
    total_size += 1 + 1;
  }

  // int32 dribble_complete_distance = 5;
  if (this->dribble_complete_distance() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dribble_complete_distance());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dribble::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.Dribble)
  GOOGLE_DCHECK_NE(&from, this);
  const Dribble* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Dribble>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.Dribble)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.Dribble)
    MergeFrom(*source);
  }
}

void Dribble::MergeFrom(const Dribble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.Dribble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dribble_goal()) {
    mutable_dribble_goal()->::aisaacpb::Position::MergeFrom(from.dribble_goal());
  }
  if (from.dribble_power() != 0) {
    set_dribble_power(from.dribble_power());
  }
  if (from.dribble_state() != 0) {
    set_dribble_state(from.dribble_state());
  }
  if (from.dribbler_active() != 0) {
    set_dribbler_active(from.dribbler_active());
  }
  if (from.dribble_complete_distance() != 0) {
    set_dribble_complete_distance(from.dribble_complete_distance());
  }
}

void Dribble::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.Dribble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dribble::CopyFrom(const Dribble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.Dribble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dribble::IsInitialized() const {
  return true;
}

void Dribble::Swap(Dribble* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dribble::InternalSwap(Dribble* other) {
  using std::swap;
  swap(dribble_goal_, other->dribble_goal_);
  swap(dribble_power_, other->dribble_power_);
  swap(dribble_state_, other->dribble_state_);
  swap(dribbler_active_, other->dribbler_active_);
  swap(dribble_complete_distance_, other->dribble_complete_distance_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Dribble::GetMetadata() const {
  protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SpcCommand::InitAsDefaultInstance() {
  ::aisaacpb::_SpcCommand_default_instance_._instance.get_mutable()->goal_pose_ = const_cast< ::aisaacpb::Position*>(
      ::aisaacpb::Position::internal_default_instance());
  ::aisaacpb::_SpcCommand_default_instance_._instance.get_mutable()->middle_goal_pose_ = const_cast< ::aisaacpb::Position*>(
      ::aisaacpb::Position::internal_default_instance());
  ::aisaacpb::_SpcCommand_default_instance_._instance.get_mutable()->dribble_ = const_cast< ::aisaacpb::Dribble*>(
      ::aisaacpb::Dribble::internal_default_instance());
  ::aisaacpb::_SpcCommand_default_instance_._instance.get_mutable()->kick_ = const_cast< ::aisaacpb::Kick*>(
      ::aisaacpb::Kick::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SpcCommand::kRobotCommandTypeFieldNumber;
const int SpcCommand::kGoalPoseFieldNumber;
const int SpcCommand::kProhibitedZoneIgnoreFieldNumber;
const int SpcCommand::kMiddleTargetFlagFieldNumber;
const int SpcCommand::kMiddleGoalPoseFieldNumber;
const int SpcCommand::kDribbleFieldNumber;
const int SpcCommand::kKickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SpcCommand::SpcCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_aisaaccommand_2eproto::scc_info_SpcCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aisaacpb.SpcCommand)
}
SpcCommand::SpcCommand(const SpcCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_goal_pose()) {
    goal_pose_ = new ::aisaacpb::Position(*from.goal_pose_);
  } else {
    goal_pose_ = NULL;
  }
  if (from.has_middle_goal_pose()) {
    middle_goal_pose_ = new ::aisaacpb::Position(*from.middle_goal_pose_);
  } else {
    middle_goal_pose_ = NULL;
  }
  if (from.has_dribble()) {
    dribble_ = new ::aisaacpb::Dribble(*from.dribble_);
  } else {
    dribble_ = NULL;
  }
  if (from.has_kick()) {
    kick_ = new ::aisaacpb::Kick(*from.kick_);
  } else {
    kick_ = NULL;
  }
  ::memcpy(&robot_command_type_, &from.robot_command_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&middle_target_flag_) -
    reinterpret_cast<char*>(&robot_command_type_)) + sizeof(middle_target_flag_));
  // @@protoc_insertion_point(copy_constructor:aisaacpb.SpcCommand)
}

void SpcCommand::SharedCtor() {
  ::memset(&goal_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&middle_target_flag_) -
      reinterpret_cast<char*>(&goal_pose_)) + sizeof(middle_target_flag_));
}

SpcCommand::~SpcCommand() {
  // @@protoc_insertion_point(destructor:aisaacpb.SpcCommand)
  SharedDtor();
}

void SpcCommand::SharedDtor() {
  if (this != internal_default_instance()) delete goal_pose_;
  if (this != internal_default_instance()) delete middle_goal_pose_;
  if (this != internal_default_instance()) delete dribble_;
  if (this != internal_default_instance()) delete kick_;
}

void SpcCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SpcCommand::descriptor() {
  ::protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SpcCommand& SpcCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_aisaaccommand_2eproto::scc_info_SpcCommand.base);
  return *internal_default_instance();
}


void SpcCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.SpcCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && goal_pose_ != NULL) {
    delete goal_pose_;
  }
  goal_pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && middle_goal_pose_ != NULL) {
    delete middle_goal_pose_;
  }
  middle_goal_pose_ = NULL;
  if (GetArenaNoVirtual() == NULL && dribble_ != NULL) {
    delete dribble_;
  }
  dribble_ = NULL;
  if (GetArenaNoVirtual() == NULL && kick_ != NULL) {
    delete kick_;
  }
  kick_ = NULL;
  ::memset(&robot_command_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&middle_target_flag_) -
      reinterpret_cast<char*>(&robot_command_type_)) + sizeof(middle_target_flag_));
  _internal_metadata_.Clear();
}

bool SpcCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aisaacpb.SpcCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_robot_command_type(static_cast< ::aisaacpb::RobotCommandCoordinateSystemType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aisaacpb.Position goal_pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_goal_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool prohibited_zone_ignore = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &prohibited_zone_ignore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool middle_target_flag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &middle_target_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aisaacpb.Position middle_goal_pose = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_middle_goal_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aisaacpb.Dribble dribble = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dribble()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aisaacpb.Kick kick = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aisaacpb.SpcCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aisaacpb.SpcCommand)
  return false;
#undef DO_
}

void SpcCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aisaacpb.SpcCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
  if (this->robot_command_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->robot_command_type(), output);
  }

  // .aisaacpb.Position goal_pose = 2;
  if (this->has_goal_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_goal_pose(), output);
  }

  // bool prohibited_zone_ignore = 3;
  if (this->prohibited_zone_ignore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->prohibited_zone_ignore(), output);
  }

  // bool middle_target_flag = 4;
  if (this->middle_target_flag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->middle_target_flag(), output);
  }

  // .aisaacpb.Position middle_goal_pose = 5;
  if (this->has_middle_goal_pose()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_middle_goal_pose(), output);
  }

  // .aisaacpb.Dribble dribble = 6;
  if (this->has_dribble()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_dribble(), output);
  }

  // .aisaacpb.Kick kick = 7;
  if (this->has_kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_kick(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:aisaacpb.SpcCommand)
}

::google::protobuf::uint8* SpcCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.SpcCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
  if (this->robot_command_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->robot_command_type(), target);
  }

  // .aisaacpb.Position goal_pose = 2;
  if (this->has_goal_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_goal_pose(), deterministic, target);
  }

  // bool prohibited_zone_ignore = 3;
  if (this->prohibited_zone_ignore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->prohibited_zone_ignore(), target);
  }

  // bool middle_target_flag = 4;
  if (this->middle_target_flag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->middle_target_flag(), target);
  }

  // .aisaacpb.Position middle_goal_pose = 5;
  if (this->has_middle_goal_pose()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_middle_goal_pose(), deterministic, target);
  }

  // .aisaacpb.Dribble dribble = 6;
  if (this->has_dribble()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_dribble(), deterministic, target);
  }

  // .aisaacpb.Kick kick = 7;
  if (this->has_kick()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_kick(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.SpcCommand)
  return target;
}

size_t SpcCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.SpcCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .aisaacpb.Position goal_pose = 2;
  if (this->has_goal_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *goal_pose_);
  }

  // .aisaacpb.Position middle_goal_pose = 5;
  if (this->has_middle_goal_pose()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *middle_goal_pose_);
  }

  // .aisaacpb.Dribble dribble = 6;
  if (this->has_dribble()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dribble_);
  }

  // .aisaacpb.Kick kick = 7;
  if (this->has_kick()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kick_);
  }

  // .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
  if (this->robot_command_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->robot_command_type());
  }

  // bool prohibited_zone_ignore = 3;
  if (this->prohibited_zone_ignore() != 0) {
    total_size += 1 + 1;
  }

  // bool middle_target_flag = 4;
  if (this->middle_target_flag() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpcCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.SpcCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SpcCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SpcCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.SpcCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.SpcCommand)
    MergeFrom(*source);
  }
}

void SpcCommand::MergeFrom(const SpcCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.SpcCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_goal_pose()) {
    mutable_goal_pose()->::aisaacpb::Position::MergeFrom(from.goal_pose());
  }
  if (from.has_middle_goal_pose()) {
    mutable_middle_goal_pose()->::aisaacpb::Position::MergeFrom(from.middle_goal_pose());
  }
  if (from.has_dribble()) {
    mutable_dribble()->::aisaacpb::Dribble::MergeFrom(from.dribble());
  }
  if (from.has_kick()) {
    mutable_kick()->::aisaacpb::Kick::MergeFrom(from.kick());
  }
  if (from.robot_command_type() != 0) {
    set_robot_command_type(from.robot_command_type());
  }
  if (from.prohibited_zone_ignore() != 0) {
    set_prohibited_zone_ignore(from.prohibited_zone_ignore());
  }
  if (from.middle_target_flag() != 0) {
    set_middle_target_flag(from.middle_target_flag());
  }
}

void SpcCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.SpcCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpcCommand::CopyFrom(const SpcCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.SpcCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpcCommand::IsInitialized() const {
  return true;
}

void SpcCommand::Swap(SpcCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SpcCommand::InternalSwap(SpcCommand* other) {
  using std::swap;
  swap(goal_pose_, other->goal_pose_);
  swap(middle_goal_pose_, other->middle_goal_pose_);
  swap(dribble_, other->dribble_);
  swap(kick_, other->kick_);
  swap(robot_command_type_, other->robot_command_type_);
  swap(prohibited_zone_ignore_, other->prohibited_zone_ignore_);
  swap(middle_target_flag_, other->middle_target_flag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SpcCommand::GetMetadata() const {
  protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RaspiCommand::InitAsDefaultInstance() {
  ::aisaacpb::_RaspiCommand_default_instance_._instance.get_mutable()->goal_pose_velocity_ = const_cast< ::aisaacpb::Velocity*>(
      ::aisaacpb::Velocity::internal_default_instance());
  ::aisaacpb::_RaspiCommand_default_instance_._instance.get_mutable()->dribble_ = const_cast< ::aisaacpb::Dribble*>(
      ::aisaacpb::Dribble::internal_default_instance());
  ::aisaacpb::_RaspiCommand_default_instance_._instance.get_mutable()->kick_ = const_cast< ::aisaacpb::Kick*>(
      ::aisaacpb::Kick::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RaspiCommand::kRobotCommandTypeFieldNumber;
const int RaspiCommand::kGoalPoseVelocityFieldNumber;
const int RaspiCommand::kDribbleFieldNumber;
const int RaspiCommand::kKickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RaspiCommand::RaspiCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_aisaaccommand_2eproto::scc_info_RaspiCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aisaacpb.RaspiCommand)
}
RaspiCommand::RaspiCommand(const RaspiCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_goal_pose_velocity()) {
    goal_pose_velocity_ = new ::aisaacpb::Velocity(*from.goal_pose_velocity_);
  } else {
    goal_pose_velocity_ = NULL;
  }
  if (from.has_dribble()) {
    dribble_ = new ::aisaacpb::Dribble(*from.dribble_);
  } else {
    dribble_ = NULL;
  }
  if (from.has_kick()) {
    kick_ = new ::aisaacpb::Kick(*from.kick_);
  } else {
    kick_ = NULL;
  }
  robot_command_type_ = from.robot_command_type_;
  // @@protoc_insertion_point(copy_constructor:aisaacpb.RaspiCommand)
}

void RaspiCommand::SharedCtor() {
  ::memset(&goal_pose_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_command_type_) -
      reinterpret_cast<char*>(&goal_pose_velocity_)) + sizeof(robot_command_type_));
}

RaspiCommand::~RaspiCommand() {
  // @@protoc_insertion_point(destructor:aisaacpb.RaspiCommand)
  SharedDtor();
}

void RaspiCommand::SharedDtor() {
  if (this != internal_default_instance()) delete goal_pose_velocity_;
  if (this != internal_default_instance()) delete dribble_;
  if (this != internal_default_instance()) delete kick_;
}

void RaspiCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RaspiCommand::descriptor() {
  ::protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RaspiCommand& RaspiCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_aisaaccommand_2eproto::scc_info_RaspiCommand.base);
  return *internal_default_instance();
}


void RaspiCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.RaspiCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && goal_pose_velocity_ != NULL) {
    delete goal_pose_velocity_;
  }
  goal_pose_velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && dribble_ != NULL) {
    delete dribble_;
  }
  dribble_ = NULL;
  if (GetArenaNoVirtual() == NULL && kick_ != NULL) {
    delete kick_;
  }
  kick_ = NULL;
  robot_command_type_ = 0;
  _internal_metadata_.Clear();
}

bool RaspiCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aisaacpb.RaspiCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_robot_command_type(static_cast< ::aisaacpb::RobotCommandCoordinateSystemType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aisaacpb.Velocity goal_pose_velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_goal_pose_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aisaacpb.Dribble dribble = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dribble()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aisaacpb.Kick kick = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aisaacpb.RaspiCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aisaacpb.RaspiCommand)
  return false;
#undef DO_
}

void RaspiCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aisaacpb.RaspiCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
  if (this->robot_command_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->robot_command_type(), output);
  }

  // .aisaacpb.Velocity goal_pose_velocity = 2;
  if (this->has_goal_pose_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_goal_pose_velocity(), output);
  }

  // .aisaacpb.Dribble dribble = 3;
  if (this->has_dribble()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_dribble(), output);
  }

  // .aisaacpb.Kick kick = 4;
  if (this->has_kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_kick(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:aisaacpb.RaspiCommand)
}

::google::protobuf::uint8* RaspiCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.RaspiCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
  if (this->robot_command_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->robot_command_type(), target);
  }

  // .aisaacpb.Velocity goal_pose_velocity = 2;
  if (this->has_goal_pose_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_goal_pose_velocity(), deterministic, target);
  }

  // .aisaacpb.Dribble dribble = 3;
  if (this->has_dribble()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_dribble(), deterministic, target);
  }

  // .aisaacpb.Kick kick = 4;
  if (this->has_kick()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_kick(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.RaspiCommand)
  return target;
}

size_t RaspiCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.RaspiCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .aisaacpb.Velocity goal_pose_velocity = 2;
  if (this->has_goal_pose_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *goal_pose_velocity_);
  }

  // .aisaacpb.Dribble dribble = 3;
  if (this->has_dribble()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *dribble_);
  }

  // .aisaacpb.Kick kick = 4;
  if (this->has_kick()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kick_);
  }

  // .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
  if (this->robot_command_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->robot_command_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaspiCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.RaspiCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RaspiCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RaspiCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.RaspiCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.RaspiCommand)
    MergeFrom(*source);
  }
}

void RaspiCommand::MergeFrom(const RaspiCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.RaspiCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_goal_pose_velocity()) {
    mutable_goal_pose_velocity()->::aisaacpb::Velocity::MergeFrom(from.goal_pose_velocity());
  }
  if (from.has_dribble()) {
    mutable_dribble()->::aisaacpb::Dribble::MergeFrom(from.dribble());
  }
  if (from.has_kick()) {
    mutable_kick()->::aisaacpb::Kick::MergeFrom(from.kick());
  }
  if (from.robot_command_type() != 0) {
    set_robot_command_type(from.robot_command_type());
  }
}

void RaspiCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.RaspiCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaspiCommand::CopyFrom(const RaspiCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.RaspiCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaspiCommand::IsInitialized() const {
  return true;
}

void RaspiCommand::Swap(RaspiCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RaspiCommand::InternalSwap(RaspiCommand* other) {
  using std::swap;
  swap(goal_pose_velocity_, other->goal_pose_velocity_);
  swap(dribble_, other->dribble_);
  swap(kick_, other->kick_);
  swap(robot_command_type_, other->robot_command_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RaspiCommand::GetMetadata() const {
  protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VisionData::InitAsDefaultInstance() {
  ::aisaacpb::_VisionData_default_instance_._instance.get_mutable()->own_machine_position_ = const_cast< ::aisaacpb::Position*>(
      ::aisaacpb::Position::internal_default_instance());
  ::aisaacpb::_VisionData_default_instance_._instance.get_mutable()->ball_position_ = const_cast< ::aisaacpb::Position*>(
      ::aisaacpb::Position::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VisionData::kOwnMachinePositionFieldNumber;
const int VisionData::kBallPositionFieldNumber;
const int VisionData::kObstaclesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VisionData::VisionData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_aisaaccommand_2eproto::scc_info_VisionData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:aisaacpb.VisionData)
}
VisionData::VisionData(const VisionData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      obstacles_(from.obstacles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_own_machine_position()) {
    own_machine_position_ = new ::aisaacpb::Position(*from.own_machine_position_);
  } else {
    own_machine_position_ = NULL;
  }
  if (from.has_ball_position()) {
    ball_position_ = new ::aisaacpb::Position(*from.ball_position_);
  } else {
    ball_position_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:aisaacpb.VisionData)
}

void VisionData::SharedCtor() {
  ::memset(&own_machine_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ball_position_) -
      reinterpret_cast<char*>(&own_machine_position_)) + sizeof(ball_position_));
}

VisionData::~VisionData() {
  // @@protoc_insertion_point(destructor:aisaacpb.VisionData)
  SharedDtor();
}

void VisionData::SharedDtor() {
  if (this != internal_default_instance()) delete own_machine_position_;
  if (this != internal_default_instance()) delete ball_position_;
}

void VisionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VisionData::descriptor() {
  ::protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VisionData& VisionData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_aisaaccommand_2eproto::scc_info_VisionData.base);
  return *internal_default_instance();
}


void VisionData::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.VisionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_.Clear();
  if (GetArenaNoVirtual() == NULL && own_machine_position_ != NULL) {
    delete own_machine_position_;
  }
  own_machine_position_ = NULL;
  if (GetArenaNoVirtual() == NULL && ball_position_ != NULL) {
    delete ball_position_;
  }
  ball_position_ = NULL;
  _internal_metadata_.Clear();
}

bool VisionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:aisaacpb.VisionData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .aisaacpb.Position own_machine_position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_own_machine_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .aisaacpb.Position ball_position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ball_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .aisaacpb.Obstacle obstacles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_obstacles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:aisaacpb.VisionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:aisaacpb.VisionData)
  return false;
#undef DO_
}

void VisionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:aisaacpb.VisionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aisaacpb.Position own_machine_position = 1;
  if (this->has_own_machine_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_own_machine_position(), output);
  }

  // .aisaacpb.Position ball_position = 2;
  if (this->has_ball_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_ball_position(), output);
  }

  // repeated .aisaacpb.Obstacle obstacles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->obstacles(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:aisaacpb.VisionData)
}

::google::protobuf::uint8* VisionData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.VisionData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aisaacpb.Position own_machine_position = 1;
  if (this->has_own_machine_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_own_machine_position(), deterministic, target);
  }

  // .aisaacpb.Position ball_position = 2;
  if (this->has_ball_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_ball_position(), deterministic, target);
  }

  // repeated .aisaacpb.Obstacle obstacles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->obstacles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->obstacles(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.VisionData)
  return target;
}

size_t VisionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.VisionData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .aisaacpb.Obstacle obstacles = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->obstacles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->obstacles(static_cast<int>(i)));
    }
  }

  // .aisaacpb.Position own_machine_position = 1;
  if (this->has_own_machine_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *own_machine_position_);
  }

  // .aisaacpb.Position ball_position = 2;
  if (this->has_ball_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ball_position_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisionData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.VisionData)
  GOOGLE_DCHECK_NE(&from, this);
  const VisionData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VisionData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.VisionData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.VisionData)
    MergeFrom(*source);
  }
}

void VisionData::MergeFrom(const VisionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.VisionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
  if (from.has_own_machine_position()) {
    mutable_own_machine_position()->::aisaacpb::Position::MergeFrom(from.own_machine_position());
  }
  if (from.has_ball_position()) {
    mutable_ball_position()->::aisaacpb::Position::MergeFrom(from.ball_position());
  }
}

void VisionData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.VisionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionData::CopyFrom(const VisionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.VisionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionData::IsInitialized() const {
  return true;
}

void VisionData::Swap(VisionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VisionData::InternalSwap(VisionData* other) {
  using std::swap;
  CastToBase(&obstacles_)->InternalSwap(CastToBase(&other->obstacles_));
  swap(own_machine_position_, other->own_machine_position_);
  swap(ball_position_, other->ball_position_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VisionData::GetMetadata() const {
  protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace aisaacpb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aisaacpb::Position* Arena::CreateMaybeMessage< ::aisaacpb::Position >(Arena* arena) {
  return Arena::CreateInternal< ::aisaacpb::Position >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aisaacpb::Velocity* Arena::CreateMaybeMessage< ::aisaacpb::Velocity >(Arena* arena) {
  return Arena::CreateInternal< ::aisaacpb::Velocity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aisaacpb::Acceleration* Arena::CreateMaybeMessage< ::aisaacpb::Acceleration >(Arena* arena) {
  return Arena::CreateInternal< ::aisaacpb::Acceleration >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aisaacpb::Obstacle* Arena::CreateMaybeMessage< ::aisaacpb::Obstacle >(Arena* arena) {
  return Arena::CreateInternal< ::aisaacpb::Obstacle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aisaacpb::Kick* Arena::CreateMaybeMessage< ::aisaacpb::Kick >(Arena* arena) {
  return Arena::CreateInternal< ::aisaacpb::Kick >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aisaacpb::Dribble* Arena::CreateMaybeMessage< ::aisaacpb::Dribble >(Arena* arena) {
  return Arena::CreateInternal< ::aisaacpb::Dribble >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aisaacpb::SpcCommand* Arena::CreateMaybeMessage< ::aisaacpb::SpcCommand >(Arena* arena) {
  return Arena::CreateInternal< ::aisaacpb::SpcCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aisaacpb::RaspiCommand* Arena::CreateMaybeMessage< ::aisaacpb::RaspiCommand >(Arena* arena) {
  return Arena::CreateInternal< ::aisaacpb::RaspiCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::aisaacpb::VisionData* Arena::CreateMaybeMessage< ::aisaacpb::VisionData >(Arena* arena) {
  return Arena::CreateInternal< ::aisaacpb::VisionData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
