// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aisaaccommand.proto

#include "aisaaccommand.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_aisaaccommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dribble_aisaaccommand_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_aisaaccommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Kick_aisaaccommand_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_aisaaccommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Obstacle_aisaaccommand_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_aisaaccommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_aisaaccommand_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_aisaaccommand_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Velocity_aisaaccommand_2eproto;
namespace aisaacpb {
class PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Position> _instance;
} _Position_default_instance_;
class VelocityDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Velocity> _instance;
} _Velocity_default_instance_;
class AccelerationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Acceleration> _instance;
} _Acceleration_default_instance_;
class ObstacleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Obstacle> _instance;
} _Obstacle_default_instance_;
class KickDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Kick> _instance;
} _Kick_default_instance_;
class DribbleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dribble> _instance;
} _Dribble_default_instance_;
class SpcCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SpcCommand> _instance;
} _SpcCommand_default_instance_;
class RaspiCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RaspiCommand> _instance;
} _RaspiCommand_default_instance_;
class VisionDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VisionData> _instance;
} _VisionData_default_instance_;
}  // namespace aisaacpb
static void InitDefaultsscc_info_Acceleration_aisaaccommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_Acceleration_default_instance_;
    new (ptr) ::aisaacpb::Acceleration();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::Acceleration::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Acceleration_aisaaccommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Acceleration_aisaaccommand_2eproto}, {}};

static void InitDefaultsscc_info_Dribble_aisaaccommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_Dribble_default_instance_;
    new (ptr) ::aisaacpb::Dribble();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::Dribble::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Dribble_aisaaccommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Dribble_aisaaccommand_2eproto}, {
      &scc_info_Position_aisaaccommand_2eproto.base,}};

static void InitDefaultsscc_info_Kick_aisaaccommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_Kick_default_instance_;
    new (ptr) ::aisaacpb::Kick();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::Kick::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Kick_aisaaccommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Kick_aisaaccommand_2eproto}, {
      &scc_info_Position_aisaaccommand_2eproto.base,}};

static void InitDefaultsscc_info_Obstacle_aisaaccommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_Obstacle_default_instance_;
    new (ptr) ::aisaacpb::Obstacle();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::Obstacle::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Obstacle_aisaaccommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Obstacle_aisaaccommand_2eproto}, {}};

static void InitDefaultsscc_info_Position_aisaaccommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_Position_default_instance_;
    new (ptr) ::aisaacpb::Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Position_aisaaccommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Position_aisaaccommand_2eproto}, {}};

static void InitDefaultsscc_info_RaspiCommand_aisaaccommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_RaspiCommand_default_instance_;
    new (ptr) ::aisaacpb::RaspiCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::RaspiCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RaspiCommand_aisaaccommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RaspiCommand_aisaaccommand_2eproto}, {
      &scc_info_Velocity_aisaaccommand_2eproto.base,
      &scc_info_Dribble_aisaaccommand_2eproto.base,
      &scc_info_Kick_aisaaccommand_2eproto.base,}};

static void InitDefaultsscc_info_SpcCommand_aisaaccommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_SpcCommand_default_instance_;
    new (ptr) ::aisaacpb::SpcCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::SpcCommand::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SpcCommand_aisaaccommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SpcCommand_aisaaccommand_2eproto}, {
      &scc_info_Position_aisaaccommand_2eproto.base,
      &scc_info_Dribble_aisaaccommand_2eproto.base,
      &scc_info_Kick_aisaaccommand_2eproto.base,}};

static void InitDefaultsscc_info_Velocity_aisaaccommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_Velocity_default_instance_;
    new (ptr) ::aisaacpb::Velocity();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::Velocity::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Velocity_aisaaccommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Velocity_aisaaccommand_2eproto}, {}};

static void InitDefaultsscc_info_VisionData_aisaaccommand_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::aisaacpb::_VisionData_default_instance_;
    new (ptr) ::aisaacpb::VisionData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::aisaacpb::VisionData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_VisionData_aisaaccommand_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_VisionData_aisaaccommand_2eproto}, {
      &scc_info_Position_aisaaccommand_2eproto.base,
      &scc_info_Obstacle_aisaaccommand_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_aisaaccommand_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_aisaaccommand_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_aisaaccommand_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_aisaaccommand_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Position, x_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Position, y_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Position, theta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Velocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Velocity, vx_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Velocity, vy_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Velocity, omega_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Acceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Acceleration, ax_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Acceleration, ay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Obstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Obstacle, x_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Obstacle, y_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Obstacle, theta_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Obstacle, vx_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Obstacle, vy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Kick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Kick, sensor_type_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Kick, kick_method_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Kick, kick_power_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Kick, ball_kick_active_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Kick, free_kick_flag_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Kick, ball_goal_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Kick, ball_target_allowable_error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Dribble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Dribble, dribble_power_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Dribble, dribble_state_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Dribble, dribbler_active_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Dribble, dribble_goal_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::Dribble, dribble_complete_distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::SpcCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::SpcCommand, robot_command_type_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::SpcCommand, goal_pose_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::SpcCommand, prohibited_zone_ignore_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::SpcCommand, middle_target_flag_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::SpcCommand, middle_goal_pose_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::SpcCommand, dribble_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::SpcCommand, kick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::RaspiCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::RaspiCommand, robot_command_type_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::RaspiCommand, goal_pose_velocity_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::RaspiCommand, dribble_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::RaspiCommand, kick_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::VisionData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::aisaacpb::VisionData, own_machine_position_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::VisionData, ball_position_),
  PROTOBUF_FIELD_OFFSET(::aisaacpb::VisionData, obstacles_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::aisaacpb::Position)},
  { 8, -1, sizeof(::aisaacpb::Velocity)},
  { 16, -1, sizeof(::aisaacpb::Acceleration)},
  { 23, -1, sizeof(::aisaacpb::Obstacle)},
  { 33, -1, sizeof(::aisaacpb::Kick)},
  { 45, -1, sizeof(::aisaacpb::Dribble)},
  { 55, -1, sizeof(::aisaacpb::SpcCommand)},
  { 67, -1, sizeof(::aisaacpb::RaspiCommand)},
  { 76, -1, sizeof(::aisaacpb::VisionData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aisaacpb::_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aisaacpb::_Velocity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aisaacpb::_Acceleration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aisaacpb::_Obstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aisaacpb::_Kick_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aisaacpb::_Dribble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aisaacpb::_SpcCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aisaacpb::_RaspiCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::aisaacpb::_VisionData_default_instance_),
};

const char descriptor_table_protodef_aisaaccommand_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023aisaaccommand.proto\022\010aisaacpb\"/\n\010Posit"
  "ion\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\022\r\n\005theta\030\003 \001(\005"
  "\"1\n\010Velocity\022\n\n\002vx\030\001 \001(\005\022\n\n\002vy\030\002 \001(\005\022\r\n\005"
  "omega\030\003 \001(\005\"&\n\014Acceleration\022\n\n\002ax\030\001 \001(\005\022"
  "\n\n\002ay\030\002 \001(\005\"G\n\010Obstacle\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030"
  "\002 \001(\005\022\r\n\005theta\030\003 \001(\005\022\n\n\002vx\030\004 \001(\005\022\n\n\002vy\030\005"
  " \001(\005\"\321\002\n\004Kick\022,\n\013sensor_type\030\001 \001(\0162\027.ais"
  "aacpb.Kick.KickType\022.\n\013kick_method\030\002 \001(\016"
  "2\031.aisaacpb.Kick.KickMethod\022\022\n\nkick_powe"
  "r\030\003 \001(\005\022\030\n\020ball_kick_active\030\004 \001(\010\022\026\n\016fre"
  "e_kick_flag\030\005 \001(\010\022%\n\tball_goal\030\006 \001(\0132\022.a"
  "isaacpb.Position\022#\n\033ball_target_allowabl"
  "e_error\030\007 \001(\005\"3\n\010KickType\022\010\n\004None\020\000\022\t\n\005F"
  "orce\020\001\022\n\n\006Sensor\020\002\022\006\n\002XY\020\003\"$\n\nKickMethod"
  "\022\010\n\004Chip\020\000\022\014\n\010Straight\020\001\"\235\001\n\007Dribble\022\025\n\r"
  "dribble_power\030\001 \001(\001\022\025\n\rdribble_state\030\002 \001"
  "(\010\022\027\n\017dribbler_active\030\003 \001(\010\022(\n\014dribble_g"
  "oal\030\004 \001(\0132\022.aisaacpb.Position\022!\n\031dribble"
  "_complete_distance\030\005 \001(\005\"\247\002\n\nSpcCommand\022"
  "F\n\022robot_command_type\030\001 \001(\0162*.aisaacpb.R"
  "obotCommandCoordinateSystemType\022%\n\tgoal_"
  "pose\030\002 \001(\0132\022.aisaacpb.Position\022\036\n\026prohib"
  "ited_zone_ignore\030\003 \001(\010\022\032\n\022middle_target_"
  "flag\030\004 \001(\010\022,\n\020middle_goal_pose\030\005 \001(\0132\022.a"
  "isaacpb.Position\022\"\n\007dribble\030\006 \001(\0132\021.aisa"
  "acpb.Dribble\022\034\n\004kick\030\007 \001(\0132\016.aisaacpb.Ki"
  "ck\"\310\001\n\014RaspiCommand\022F\n\022robot_command_typ"
  "e\030\001 \001(\0162*.aisaacpb.RobotCommandCoordinat"
  "eSystemType\022.\n\022goal_pose_velocity\030\002 \001(\0132"
  "\022.aisaacpb.Velocity\022\"\n\007dribble\030\003 \001(\0132\021.a"
  "isaacpb.Dribble\022\034\n\004kick\030\004 \001(\0132\016.aisaacpb"
  ".Kick\"\220\001\n\nVisionData\0220\n\024own_machine_posi"
  "tion\030\001 \001(\0132\022.aisaacpb.Position\022)\n\rball_p"
  "osition\030\002 \001(\0132\022.aisaacpb.Position\022%\n\tobs"
  "tacles\030\003 \003(\0132\022.aisaacpb.Obstacle*I\n Robo"
  "tCommandCoordinateSystemType\022\n\n\006Vector\020\000"
  "\022\016\n\nCoordinate\020\001\022\t\n\005Relax\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_aisaaccommand_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_aisaaccommand_2eproto_sccs[9] = {
  &scc_info_Acceleration_aisaaccommand_2eproto.base,
  &scc_info_Dribble_aisaaccommand_2eproto.base,
  &scc_info_Kick_aisaaccommand_2eproto.base,
  &scc_info_Obstacle_aisaaccommand_2eproto.base,
  &scc_info_Position_aisaaccommand_2eproto.base,
  &scc_info_RaspiCommand_aisaaccommand_2eproto.base,
  &scc_info_SpcCommand_aisaaccommand_2eproto.base,
  &scc_info_Velocity_aisaaccommand_2eproto.base,
  &scc_info_VisionData_aisaaccommand_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_aisaaccommand_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_aisaaccommand_2eproto = {
  false, false, descriptor_table_protodef_aisaaccommand_2eproto, "aisaaccommand.proto", 1475,
  &descriptor_table_aisaaccommand_2eproto_once, descriptor_table_aisaaccommand_2eproto_sccs, descriptor_table_aisaaccommand_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_aisaaccommand_2eproto::offsets,
  file_level_metadata_aisaaccommand_2eproto, 9, file_level_enum_descriptors_aisaaccommand_2eproto, file_level_service_descriptors_aisaaccommand_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_aisaaccommand_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_aisaaccommand_2eproto)), true);
namespace aisaacpb {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Kick_KickType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_aisaaccommand_2eproto);
  return file_level_enum_descriptors_aisaaccommand_2eproto[0];
}
bool Kick_KickType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Kick_KickType Kick::None;
constexpr Kick_KickType Kick::Force;
constexpr Kick_KickType Kick::Sensor;
constexpr Kick_KickType Kick::XY;
constexpr Kick_KickType Kick::KickType_MIN;
constexpr Kick_KickType Kick::KickType_MAX;
constexpr int Kick::KickType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Kick_KickMethod_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_aisaaccommand_2eproto);
  return file_level_enum_descriptors_aisaaccommand_2eproto[1];
}
bool Kick_KickMethod_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Kick_KickMethod Kick::Chip;
constexpr Kick_KickMethod Kick::Straight;
constexpr Kick_KickMethod Kick::KickMethod_MIN;
constexpr Kick_KickMethod Kick::KickMethod_MAX;
constexpr int Kick::KickMethod_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RobotCommandCoordinateSystemType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_aisaaccommand_2eproto);
  return file_level_enum_descriptors_aisaaccommand_2eproto[2];
}
bool RobotCommandCoordinateSystemType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Position::InitAsDefaultInstance() {
}
class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aisaacpb.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&theta_) -
    reinterpret_cast<char*>(&x_)) + sizeof(theta_));
  // @@protoc_insertion_point(copy_constructor:aisaacpb.Position)
}

void Position::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&x_)) + sizeof(theta_));
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:aisaacpb.Position)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Position::ArenaDtor(void* object) {
  Position* _this = reinterpret_cast< Position* >(object);
  (void)_this;
}
void Position::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Position& Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Position_aisaaccommand_2eproto.base);
  return *internal_default_instance();
}


void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&x_)) + sizeof(theta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 theta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 theta = 3;
  if (this->theta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_theta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 theta = 3;
  if (this->theta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_theta());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.Position)
    MergeFrom(*source);
  }
}

void Position::MergeFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.theta() != 0) {
    _internal_set_theta(from._internal_theta());
  }
}

void Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, theta_)
      + sizeof(Position::theta_)
      - PROTOBUF_FIELD_OFFSET(Position, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Velocity::InitAsDefaultInstance() {
}
class Velocity::_Internal {
 public:
};

Velocity::Velocity(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aisaacpb.Velocity)
}
Velocity::Velocity(const Velocity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&vx_, &from.vx_,
    static_cast<size_t>(reinterpret_cast<char*>(&omega_) -
    reinterpret_cast<char*>(&vx_)) + sizeof(omega_));
  // @@protoc_insertion_point(copy_constructor:aisaacpb.Velocity)
}

void Velocity::SharedCtor() {
  ::memset(&vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&omega_) -
      reinterpret_cast<char*>(&vx_)) + sizeof(omega_));
}

Velocity::~Velocity() {
  // @@protoc_insertion_point(destructor:aisaacpb.Velocity)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Velocity::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Velocity::ArenaDtor(void* object) {
  Velocity* _this = reinterpret_cast< Velocity* >(object);
  (void)_this;
}
void Velocity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Velocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Velocity& Velocity::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Velocity_aisaaccommand_2eproto.base);
  return *internal_default_instance();
}


void Velocity::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&omega_) -
      reinterpret_cast<char*>(&vx_)) + sizeof(omega_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Velocity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 vx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 omega = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          omega_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Velocity::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.Velocity)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 vx = 1;
  if (this->vx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_vx(), target);
  }

  // int32 vy = 2;
  if (this->vy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vy(), target);
  }

  // int32 omega = 3;
  if (this->omega() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_omega(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.Velocity)
  return target;
}

size_t Velocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.Velocity)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 vx = 1;
  if (this->vx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vx());
  }

  // int32 vy = 2;
  if (this->vy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vy());
  }

  // int32 omega = 3;
  if (this->omega() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_omega());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Velocity::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  const Velocity* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Velocity>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.Velocity)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.Velocity)
    MergeFrom(*source);
  }
}

void Velocity::MergeFrom(const Velocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.Velocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.vx() != 0) {
    _internal_set_vx(from._internal_vx());
  }
  if (from.vy() != 0) {
    _internal_set_vy(from._internal_vy());
  }
  if (from.omega() != 0) {
    _internal_set_omega(from._internal_omega());
  }
}

void Velocity::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Velocity::CopyFrom(const Velocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.Velocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Velocity::IsInitialized() const {
  return true;
}

void Velocity::InternalSwap(Velocity* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Velocity, omega_)
      + sizeof(Velocity::omega_)
      - PROTOBUF_FIELD_OFFSET(Velocity, vx_)>(
          reinterpret_cast<char*>(&vx_),
          reinterpret_cast<char*>(&other->vx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Velocity::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Acceleration::InitAsDefaultInstance() {
}
class Acceleration::_Internal {
 public:
};

Acceleration::Acceleration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aisaacpb.Acceleration)
}
Acceleration::Acceleration(const Acceleration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ax_, &from.ax_,
    static_cast<size_t>(reinterpret_cast<char*>(&ay_) -
    reinterpret_cast<char*>(&ax_)) + sizeof(ay_));
  // @@protoc_insertion_point(copy_constructor:aisaacpb.Acceleration)
}

void Acceleration::SharedCtor() {
  ::memset(&ax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ay_) -
      reinterpret_cast<char*>(&ax_)) + sizeof(ay_));
}

Acceleration::~Acceleration() {
  // @@protoc_insertion_point(destructor:aisaacpb.Acceleration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Acceleration::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Acceleration::ArenaDtor(void* object) {
  Acceleration* _this = reinterpret_cast< Acceleration* >(object);
  (void)_this;
}
void Acceleration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Acceleration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Acceleration& Acceleration::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Acceleration_aisaaccommand_2eproto.base);
  return *internal_default_instance();
}


void Acceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.Acceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ax_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ay_) -
      reinterpret_cast<char*>(&ax_)) + sizeof(ay_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Acceleration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 ax = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ax_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Acceleration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.Acceleration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ax = 1;
  if (this->ax() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ax(), target);
  }

  // int32 ay = 2;
  if (this->ay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_ay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.Acceleration)
  return target;
}

size_t Acceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.Acceleration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ax = 1;
  if (this->ax() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ax());
  }

  // int32 ay = 2;
  if (this->ay() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ay());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Acceleration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.Acceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const Acceleration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Acceleration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.Acceleration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.Acceleration)
    MergeFrom(*source);
  }
}

void Acceleration::MergeFrom(const Acceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.Acceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ax() != 0) {
    _internal_set_ax(from._internal_ax());
  }
  if (from.ay() != 0) {
    _internal_set_ay(from._internal_ay());
  }
}

void Acceleration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.Acceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Acceleration::CopyFrom(const Acceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.Acceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acceleration::IsInitialized() const {
  return true;
}

void Acceleration::InternalSwap(Acceleration* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Acceleration, ay_)
      + sizeof(Acceleration::ay_)
      - PROTOBUF_FIELD_OFFSET(Acceleration, ax_)>(
          reinterpret_cast<char*>(&ax_),
          reinterpret_cast<char*>(&other->ax_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Acceleration::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Obstacle::InitAsDefaultInstance() {
}
class Obstacle::_Internal {
 public:
};

Obstacle::Obstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aisaacpb.Obstacle)
}
Obstacle::Obstacle(const Obstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&vy_) -
    reinterpret_cast<char*>(&x_)) + sizeof(vy_));
  // @@protoc_insertion_point(copy_constructor:aisaacpb.Obstacle)
}

void Obstacle::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vy_) -
      reinterpret_cast<char*>(&x_)) + sizeof(vy_));
}

Obstacle::~Obstacle() {
  // @@protoc_insertion_point(destructor:aisaacpb.Obstacle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Obstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Obstacle::ArenaDtor(void* object) {
  Obstacle* _this = reinterpret_cast< Obstacle* >(object);
  (void)_this;
}
void Obstacle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Obstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Obstacle& Obstacle::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Obstacle_aisaaccommand_2eproto.base);
  return *internal_default_instance();
}


void Obstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.Obstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vy_) -
      reinterpret_cast<char*>(&x_)) + sizeof(vy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Obstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 theta = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vx = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vx_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 vy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          vy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Obstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.Obstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_y(), target);
  }

  // int32 theta = 3;
  if (this->theta() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_theta(), target);
  }

  // int32 vx = 4;
  if (this->vx() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_vx(), target);
  }

  // int32 vy = 5;
  if (this->vy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_vy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.Obstacle)
  return target;
}

size_t Obstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.Obstacle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_y());
  }

  // int32 theta = 3;
  if (this->theta() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_theta());
  }

  // int32 vx = 4;
  if (this->vx() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vx());
  }

  // int32 vy = 5;
  if (this->vy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Obstacle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const Obstacle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Obstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.Obstacle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.Obstacle)
    MergeFrom(*source);
  }
}

void Obstacle::MergeFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.Obstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    _internal_set_x(from._internal_x());
  }
  if (from.y() != 0) {
    _internal_set_y(from._internal_y());
  }
  if (from.theta() != 0) {
    _internal_set_theta(from._internal_theta());
  }
  if (from.vx() != 0) {
    _internal_set_vx(from._internal_vx());
  }
  if (from.vy() != 0) {
    _internal_set_vy(from._internal_vy());
  }
}

void Obstacle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Obstacle::CopyFrom(const Obstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.Obstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Obstacle::IsInitialized() const {
  return true;
}

void Obstacle::InternalSwap(Obstacle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Obstacle, vy_)
      + sizeof(Obstacle::vy_)
      - PROTOBUF_FIELD_OFFSET(Obstacle, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Obstacle::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Kick::InitAsDefaultInstance() {
  ::aisaacpb::_Kick_default_instance_._instance.get_mutable()->ball_goal_ = const_cast< ::aisaacpb::Position*>(
      ::aisaacpb::Position::internal_default_instance());
}
class Kick::_Internal {
 public:
  static const ::aisaacpb::Position& ball_goal(const Kick* msg);
};

const ::aisaacpb::Position&
Kick::_Internal::ball_goal(const Kick* msg) {
  return *msg->ball_goal_;
}
Kick::Kick(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aisaacpb.Kick)
}
Kick::Kick(const Kick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ball_goal()) {
    ball_goal_ = new ::aisaacpb::Position(*from.ball_goal_);
  } else {
    ball_goal_ = nullptr;
  }
  ::memcpy(&sensor_type_, &from.sensor_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&ball_target_allowable_error_) -
    reinterpret_cast<char*>(&sensor_type_)) + sizeof(ball_target_allowable_error_));
  // @@protoc_insertion_point(copy_constructor:aisaacpb.Kick)
}

void Kick::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Kick_aisaaccommand_2eproto.base);
  ::memset(&ball_goal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ball_target_allowable_error_) -
      reinterpret_cast<char*>(&ball_goal_)) + sizeof(ball_target_allowable_error_));
}

Kick::~Kick() {
  // @@protoc_insertion_point(destructor:aisaacpb.Kick)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Kick::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete ball_goal_;
}

void Kick::ArenaDtor(void* object) {
  Kick* _this = reinterpret_cast< Kick* >(object);
  (void)_this;
}
void Kick::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Kick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Kick& Kick::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Kick_aisaaccommand_2eproto.base);
  return *internal_default_instance();
}


void Kick::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.Kick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && ball_goal_ != nullptr) {
    delete ball_goal_;
  }
  ball_goal_ = nullptr;
  ::memset(&sensor_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ball_target_allowable_error_) -
      reinterpret_cast<char*>(&sensor_type_)) + sizeof(ball_target_allowable_error_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Kick::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aisaacpb.Kick.KickType sensor_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sensor_type(static_cast<::aisaacpb::Kick_KickType>(val));
        } else goto handle_unusual;
        continue;
      // .aisaacpb.Kick.KickMethod kick_method = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kick_method(static_cast<::aisaacpb::Kick_KickMethod>(val));
        } else goto handle_unusual;
        continue;
      // int32 kick_power = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          kick_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ball_kick_active = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ball_kick_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool free_kick_flag = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          free_kick_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aisaacpb.Position ball_goal = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_goal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ball_target_allowable_error = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ball_target_allowable_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Kick::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.Kick)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aisaacpb.Kick.KickType sensor_type = 1;
  if (this->sensor_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_sensor_type(), target);
  }

  // .aisaacpb.Kick.KickMethod kick_method = 2;
  if (this->kick_method() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_kick_method(), target);
  }

  // int32 kick_power = 3;
  if (this->kick_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_kick_power(), target);
  }

  // bool ball_kick_active = 4;
  if (this->ball_kick_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_ball_kick_active(), target);
  }

  // bool free_kick_flag = 5;
  if (this->free_kick_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_free_kick_flag(), target);
  }

  // .aisaacpb.Position ball_goal = 6;
  if (this->has_ball_goal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::ball_goal(this), target, stream);
  }

  // int32 ball_target_allowable_error = 7;
  if (this->ball_target_allowable_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_ball_target_allowable_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.Kick)
  return target;
}

size_t Kick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.Kick)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aisaacpb.Position ball_goal = 6;
  if (this->has_ball_goal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ball_goal_);
  }

  // .aisaacpb.Kick.KickType sensor_type = 1;
  if (this->sensor_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_sensor_type());
  }

  // .aisaacpb.Kick.KickMethod kick_method = 2;
  if (this->kick_method() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kick_method());
  }

  // int32 kick_power = 3;
  if (this->kick_power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_kick_power());
  }

  // bool ball_kick_active = 4;
  if (this->ball_kick_active() != 0) {
    total_size += 1 + 1;
  }

  // bool free_kick_flag = 5;
  if (this->free_kick_flag() != 0) {
    total_size += 1 + 1;
  }

  // int32 ball_target_allowable_error = 7;
  if (this->ball_target_allowable_error() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ball_target_allowable_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Kick::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.Kick)
  GOOGLE_DCHECK_NE(&from, this);
  const Kick* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Kick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.Kick)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.Kick)
    MergeFrom(*source);
  }
}

void Kick::MergeFrom(const Kick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.Kick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ball_goal()) {
    _internal_mutable_ball_goal()->::aisaacpb::Position::MergeFrom(from._internal_ball_goal());
  }
  if (from.sensor_type() != 0) {
    _internal_set_sensor_type(from._internal_sensor_type());
  }
  if (from.kick_method() != 0) {
    _internal_set_kick_method(from._internal_kick_method());
  }
  if (from.kick_power() != 0) {
    _internal_set_kick_power(from._internal_kick_power());
  }
  if (from.ball_kick_active() != 0) {
    _internal_set_ball_kick_active(from._internal_ball_kick_active());
  }
  if (from.free_kick_flag() != 0) {
    _internal_set_free_kick_flag(from._internal_free_kick_flag());
  }
  if (from.ball_target_allowable_error() != 0) {
    _internal_set_ball_target_allowable_error(from._internal_ball_target_allowable_error());
  }
}

void Kick::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.Kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kick::CopyFrom(const Kick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.Kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kick::IsInitialized() const {
  return true;
}

void Kick::InternalSwap(Kick* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Kick, ball_target_allowable_error_)
      + sizeof(Kick::ball_target_allowable_error_)
      - PROTOBUF_FIELD_OFFSET(Kick, ball_goal_)>(
          reinterpret_cast<char*>(&ball_goal_),
          reinterpret_cast<char*>(&other->ball_goal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Kick::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Dribble::InitAsDefaultInstance() {
  ::aisaacpb::_Dribble_default_instance_._instance.get_mutable()->dribble_goal_ = const_cast< ::aisaacpb::Position*>(
      ::aisaacpb::Position::internal_default_instance());
}
class Dribble::_Internal {
 public:
  static const ::aisaacpb::Position& dribble_goal(const Dribble* msg);
};

const ::aisaacpb::Position&
Dribble::_Internal::dribble_goal(const Dribble* msg) {
  return *msg->dribble_goal_;
}
Dribble::Dribble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aisaacpb.Dribble)
}
Dribble::Dribble(const Dribble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dribble_goal()) {
    dribble_goal_ = new ::aisaacpb::Position(*from.dribble_goal_);
  } else {
    dribble_goal_ = nullptr;
  }
  ::memcpy(&dribble_power_, &from.dribble_power_,
    static_cast<size_t>(reinterpret_cast<char*>(&dribble_complete_distance_) -
    reinterpret_cast<char*>(&dribble_power_)) + sizeof(dribble_complete_distance_));
  // @@protoc_insertion_point(copy_constructor:aisaacpb.Dribble)
}

void Dribble::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dribble_aisaaccommand_2eproto.base);
  ::memset(&dribble_goal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dribble_complete_distance_) -
      reinterpret_cast<char*>(&dribble_goal_)) + sizeof(dribble_complete_distance_));
}

Dribble::~Dribble() {
  // @@protoc_insertion_point(destructor:aisaacpb.Dribble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Dribble::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete dribble_goal_;
}

void Dribble::ArenaDtor(void* object) {
  Dribble* _this = reinterpret_cast< Dribble* >(object);
  (void)_this;
}
void Dribble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dribble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dribble& Dribble::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dribble_aisaaccommand_2eproto.base);
  return *internal_default_instance();
}


void Dribble::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.Dribble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && dribble_goal_ != nullptr) {
    delete dribble_goal_;
  }
  dribble_goal_ = nullptr;
  ::memset(&dribble_power_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dribble_complete_distance_) -
      reinterpret_cast<char*>(&dribble_power_)) + sizeof(dribble_complete_distance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dribble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double dribble_power = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          dribble_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool dribble_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dribble_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool dribbler_active = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          dribbler_active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aisaacpb.Position dribble_goal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dribble_goal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 dribble_complete_distance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          dribble_complete_distance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dribble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.Dribble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double dribble_power = 1;
  if (!(this->dribble_power() <= 0 && this->dribble_power() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_dribble_power(), target);
  }

  // bool dribble_state = 2;
  if (this->dribble_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_dribble_state(), target);
  }

  // bool dribbler_active = 3;
  if (this->dribbler_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_dribbler_active(), target);
  }

  // .aisaacpb.Position dribble_goal = 4;
  if (this->has_dribble_goal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::dribble_goal(this), target, stream);
  }

  // int32 dribble_complete_distance = 5;
  if (this->dribble_complete_distance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_dribble_complete_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.Dribble)
  return target;
}

size_t Dribble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.Dribble)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aisaacpb.Position dribble_goal = 4;
  if (this->has_dribble_goal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dribble_goal_);
  }

  // double dribble_power = 1;
  if (!(this->dribble_power() <= 0 && this->dribble_power() >= 0)) {
    total_size += 1 + 8;
  }

  // bool dribble_state = 2;
  if (this->dribble_state() != 0) {
    total_size += 1 + 1;
  }

  // bool dribbler_active = 3;
  if (this->dribbler_active() != 0) {
    total_size += 1 + 1;
  }

  // int32 dribble_complete_distance = 5;
  if (this->dribble_complete_distance() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dribble_complete_distance());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dribble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.Dribble)
  GOOGLE_DCHECK_NE(&from, this);
  const Dribble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dribble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.Dribble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.Dribble)
    MergeFrom(*source);
  }
}

void Dribble::MergeFrom(const Dribble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.Dribble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_dribble_goal()) {
    _internal_mutable_dribble_goal()->::aisaacpb::Position::MergeFrom(from._internal_dribble_goal());
  }
  if (!(from.dribble_power() <= 0 && from.dribble_power() >= 0)) {
    _internal_set_dribble_power(from._internal_dribble_power());
  }
  if (from.dribble_state() != 0) {
    _internal_set_dribble_state(from._internal_dribble_state());
  }
  if (from.dribbler_active() != 0) {
    _internal_set_dribbler_active(from._internal_dribbler_active());
  }
  if (from.dribble_complete_distance() != 0) {
    _internal_set_dribble_complete_distance(from._internal_dribble_complete_distance());
  }
}

void Dribble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.Dribble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dribble::CopyFrom(const Dribble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.Dribble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dribble::IsInitialized() const {
  return true;
}

void Dribble::InternalSwap(Dribble* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dribble, dribble_complete_distance_)
      + sizeof(Dribble::dribble_complete_distance_)
      - PROTOBUF_FIELD_OFFSET(Dribble, dribble_goal_)>(
          reinterpret_cast<char*>(&dribble_goal_),
          reinterpret_cast<char*>(&other->dribble_goal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Dribble::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SpcCommand::InitAsDefaultInstance() {
  ::aisaacpb::_SpcCommand_default_instance_._instance.get_mutable()->goal_pose_ = const_cast< ::aisaacpb::Position*>(
      ::aisaacpb::Position::internal_default_instance());
  ::aisaacpb::_SpcCommand_default_instance_._instance.get_mutable()->middle_goal_pose_ = const_cast< ::aisaacpb::Position*>(
      ::aisaacpb::Position::internal_default_instance());
  ::aisaacpb::_SpcCommand_default_instance_._instance.get_mutable()->dribble_ = const_cast< ::aisaacpb::Dribble*>(
      ::aisaacpb::Dribble::internal_default_instance());
  ::aisaacpb::_SpcCommand_default_instance_._instance.get_mutable()->kick_ = const_cast< ::aisaacpb::Kick*>(
      ::aisaacpb::Kick::internal_default_instance());
}
class SpcCommand::_Internal {
 public:
  static const ::aisaacpb::Position& goal_pose(const SpcCommand* msg);
  static const ::aisaacpb::Position& middle_goal_pose(const SpcCommand* msg);
  static const ::aisaacpb::Dribble& dribble(const SpcCommand* msg);
  static const ::aisaacpb::Kick& kick(const SpcCommand* msg);
};

const ::aisaacpb::Position&
SpcCommand::_Internal::goal_pose(const SpcCommand* msg) {
  return *msg->goal_pose_;
}
const ::aisaacpb::Position&
SpcCommand::_Internal::middle_goal_pose(const SpcCommand* msg) {
  return *msg->middle_goal_pose_;
}
const ::aisaacpb::Dribble&
SpcCommand::_Internal::dribble(const SpcCommand* msg) {
  return *msg->dribble_;
}
const ::aisaacpb::Kick&
SpcCommand::_Internal::kick(const SpcCommand* msg) {
  return *msg->kick_;
}
SpcCommand::SpcCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aisaacpb.SpcCommand)
}
SpcCommand::SpcCommand(const SpcCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_goal_pose()) {
    goal_pose_ = new ::aisaacpb::Position(*from.goal_pose_);
  } else {
    goal_pose_ = nullptr;
  }
  if (from._internal_has_middle_goal_pose()) {
    middle_goal_pose_ = new ::aisaacpb::Position(*from.middle_goal_pose_);
  } else {
    middle_goal_pose_ = nullptr;
  }
  if (from._internal_has_dribble()) {
    dribble_ = new ::aisaacpb::Dribble(*from.dribble_);
  } else {
    dribble_ = nullptr;
  }
  if (from._internal_has_kick()) {
    kick_ = new ::aisaacpb::Kick(*from.kick_);
  } else {
    kick_ = nullptr;
  }
  ::memcpy(&robot_command_type_, &from.robot_command_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&middle_target_flag_) -
    reinterpret_cast<char*>(&robot_command_type_)) + sizeof(middle_target_flag_));
  // @@protoc_insertion_point(copy_constructor:aisaacpb.SpcCommand)
}

void SpcCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SpcCommand_aisaaccommand_2eproto.base);
  ::memset(&goal_pose_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&middle_target_flag_) -
      reinterpret_cast<char*>(&goal_pose_)) + sizeof(middle_target_flag_));
}

SpcCommand::~SpcCommand() {
  // @@protoc_insertion_point(destructor:aisaacpb.SpcCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SpcCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete goal_pose_;
  if (this != internal_default_instance()) delete middle_goal_pose_;
  if (this != internal_default_instance()) delete dribble_;
  if (this != internal_default_instance()) delete kick_;
}

void SpcCommand::ArenaDtor(void* object) {
  SpcCommand* _this = reinterpret_cast< SpcCommand* >(object);
  (void)_this;
}
void SpcCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SpcCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SpcCommand& SpcCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SpcCommand_aisaaccommand_2eproto.base);
  return *internal_default_instance();
}


void SpcCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.SpcCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && goal_pose_ != nullptr) {
    delete goal_pose_;
  }
  goal_pose_ = nullptr;
  if (GetArena() == nullptr && middle_goal_pose_ != nullptr) {
    delete middle_goal_pose_;
  }
  middle_goal_pose_ = nullptr;
  if (GetArena() == nullptr && dribble_ != nullptr) {
    delete dribble_;
  }
  dribble_ = nullptr;
  if (GetArena() == nullptr && kick_ != nullptr) {
    delete kick_;
  }
  kick_ = nullptr;
  ::memset(&robot_command_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&middle_target_flag_) -
      reinterpret_cast<char*>(&robot_command_type_)) + sizeof(middle_target_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpcCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_robot_command_type(static_cast<::aisaacpb::RobotCommandCoordinateSystemType>(val));
        } else goto handle_unusual;
        continue;
      // .aisaacpb.Position goal_pose = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_goal_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool prohibited_zone_ignore = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          prohibited_zone_ignore_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool middle_target_flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          middle_target_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aisaacpb.Position middle_goal_pose = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_middle_goal_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aisaacpb.Dribble dribble = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_dribble(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aisaacpb.Kick kick = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_kick(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SpcCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.SpcCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
  if (this->robot_command_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_robot_command_type(), target);
  }

  // .aisaacpb.Position goal_pose = 2;
  if (this->has_goal_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::goal_pose(this), target, stream);
  }

  // bool prohibited_zone_ignore = 3;
  if (this->prohibited_zone_ignore() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_prohibited_zone_ignore(), target);
  }

  // bool middle_target_flag = 4;
  if (this->middle_target_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_middle_target_flag(), target);
  }

  // .aisaacpb.Position middle_goal_pose = 5;
  if (this->has_middle_goal_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::middle_goal_pose(this), target, stream);
  }

  // .aisaacpb.Dribble dribble = 6;
  if (this->has_dribble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::dribble(this), target, stream);
  }

  // .aisaacpb.Kick kick = 7;
  if (this->has_kick()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::kick(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.SpcCommand)
  return target;
}

size_t SpcCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.SpcCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aisaacpb.Position goal_pose = 2;
  if (this->has_goal_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *goal_pose_);
  }

  // .aisaacpb.Position middle_goal_pose = 5;
  if (this->has_middle_goal_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *middle_goal_pose_);
  }

  // .aisaacpb.Dribble dribble = 6;
  if (this->has_dribble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dribble_);
  }

  // .aisaacpb.Kick kick = 7;
  if (this->has_kick()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kick_);
  }

  // .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
  if (this->robot_command_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_robot_command_type());
  }

  // bool prohibited_zone_ignore = 3;
  if (this->prohibited_zone_ignore() != 0) {
    total_size += 1 + 1;
  }

  // bool middle_target_flag = 4;
  if (this->middle_target_flag() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpcCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.SpcCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SpcCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SpcCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.SpcCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.SpcCommand)
    MergeFrom(*source);
  }
}

void SpcCommand::MergeFrom(const SpcCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.SpcCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_goal_pose()) {
    _internal_mutable_goal_pose()->::aisaacpb::Position::MergeFrom(from._internal_goal_pose());
  }
  if (from.has_middle_goal_pose()) {
    _internal_mutable_middle_goal_pose()->::aisaacpb::Position::MergeFrom(from._internal_middle_goal_pose());
  }
  if (from.has_dribble()) {
    _internal_mutable_dribble()->::aisaacpb::Dribble::MergeFrom(from._internal_dribble());
  }
  if (from.has_kick()) {
    _internal_mutable_kick()->::aisaacpb::Kick::MergeFrom(from._internal_kick());
  }
  if (from.robot_command_type() != 0) {
    _internal_set_robot_command_type(from._internal_robot_command_type());
  }
  if (from.prohibited_zone_ignore() != 0) {
    _internal_set_prohibited_zone_ignore(from._internal_prohibited_zone_ignore());
  }
  if (from.middle_target_flag() != 0) {
    _internal_set_middle_target_flag(from._internal_middle_target_flag());
  }
}

void SpcCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.SpcCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SpcCommand::CopyFrom(const SpcCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.SpcCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpcCommand::IsInitialized() const {
  return true;
}

void SpcCommand::InternalSwap(SpcCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpcCommand, middle_target_flag_)
      + sizeof(SpcCommand::middle_target_flag_)
      - PROTOBUF_FIELD_OFFSET(SpcCommand, goal_pose_)>(
          reinterpret_cast<char*>(&goal_pose_),
          reinterpret_cast<char*>(&other->goal_pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpcCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RaspiCommand::InitAsDefaultInstance() {
  ::aisaacpb::_RaspiCommand_default_instance_._instance.get_mutable()->goal_pose_velocity_ = const_cast< ::aisaacpb::Velocity*>(
      ::aisaacpb::Velocity::internal_default_instance());
  ::aisaacpb::_RaspiCommand_default_instance_._instance.get_mutable()->dribble_ = const_cast< ::aisaacpb::Dribble*>(
      ::aisaacpb::Dribble::internal_default_instance());
  ::aisaacpb::_RaspiCommand_default_instance_._instance.get_mutable()->kick_ = const_cast< ::aisaacpb::Kick*>(
      ::aisaacpb::Kick::internal_default_instance());
}
class RaspiCommand::_Internal {
 public:
  static const ::aisaacpb::Velocity& goal_pose_velocity(const RaspiCommand* msg);
  static const ::aisaacpb::Dribble& dribble(const RaspiCommand* msg);
  static const ::aisaacpb::Kick& kick(const RaspiCommand* msg);
};

const ::aisaacpb::Velocity&
RaspiCommand::_Internal::goal_pose_velocity(const RaspiCommand* msg) {
  return *msg->goal_pose_velocity_;
}
const ::aisaacpb::Dribble&
RaspiCommand::_Internal::dribble(const RaspiCommand* msg) {
  return *msg->dribble_;
}
const ::aisaacpb::Kick&
RaspiCommand::_Internal::kick(const RaspiCommand* msg) {
  return *msg->kick_;
}
RaspiCommand::RaspiCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aisaacpb.RaspiCommand)
}
RaspiCommand::RaspiCommand(const RaspiCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_goal_pose_velocity()) {
    goal_pose_velocity_ = new ::aisaacpb::Velocity(*from.goal_pose_velocity_);
  } else {
    goal_pose_velocity_ = nullptr;
  }
  if (from._internal_has_dribble()) {
    dribble_ = new ::aisaacpb::Dribble(*from.dribble_);
  } else {
    dribble_ = nullptr;
  }
  if (from._internal_has_kick()) {
    kick_ = new ::aisaacpb::Kick(*from.kick_);
  } else {
    kick_ = nullptr;
  }
  robot_command_type_ = from.robot_command_type_;
  // @@protoc_insertion_point(copy_constructor:aisaacpb.RaspiCommand)
}

void RaspiCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RaspiCommand_aisaaccommand_2eproto.base);
  ::memset(&goal_pose_velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_command_type_) -
      reinterpret_cast<char*>(&goal_pose_velocity_)) + sizeof(robot_command_type_));
}

RaspiCommand::~RaspiCommand() {
  // @@protoc_insertion_point(destructor:aisaacpb.RaspiCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RaspiCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete goal_pose_velocity_;
  if (this != internal_default_instance()) delete dribble_;
  if (this != internal_default_instance()) delete kick_;
}

void RaspiCommand::ArenaDtor(void* object) {
  RaspiCommand* _this = reinterpret_cast< RaspiCommand* >(object);
  (void)_this;
}
void RaspiCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RaspiCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RaspiCommand& RaspiCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RaspiCommand_aisaaccommand_2eproto.base);
  return *internal_default_instance();
}


void RaspiCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.RaspiCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && goal_pose_velocity_ != nullptr) {
    delete goal_pose_velocity_;
  }
  goal_pose_velocity_ = nullptr;
  if (GetArena() == nullptr && dribble_ != nullptr) {
    delete dribble_;
  }
  dribble_ = nullptr;
  if (GetArena() == nullptr && kick_ != nullptr) {
    delete kick_;
  }
  kick_ = nullptr;
  robot_command_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RaspiCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_robot_command_type(static_cast<::aisaacpb::RobotCommandCoordinateSystemType>(val));
        } else goto handle_unusual;
        continue;
      // .aisaacpb.Velocity goal_pose_velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_goal_pose_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aisaacpb.Dribble dribble = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dribble(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aisaacpb.Kick kick = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_kick(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RaspiCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.RaspiCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
  if (this->robot_command_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_robot_command_type(), target);
  }

  // .aisaacpb.Velocity goal_pose_velocity = 2;
  if (this->has_goal_pose_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::goal_pose_velocity(this), target, stream);
  }

  // .aisaacpb.Dribble dribble = 3;
  if (this->has_dribble()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dribble(this), target, stream);
  }

  // .aisaacpb.Kick kick = 4;
  if (this->has_kick()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::kick(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.RaspiCommand)
  return target;
}

size_t RaspiCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.RaspiCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .aisaacpb.Velocity goal_pose_velocity = 2;
  if (this->has_goal_pose_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *goal_pose_velocity_);
  }

  // .aisaacpb.Dribble dribble = 3;
  if (this->has_dribble()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dribble_);
  }

  // .aisaacpb.Kick kick = 4;
  if (this->has_kick()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *kick_);
  }

  // .aisaacpb.RobotCommandCoordinateSystemType robot_command_type = 1;
  if (this->robot_command_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_robot_command_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RaspiCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.RaspiCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RaspiCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RaspiCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.RaspiCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.RaspiCommand)
    MergeFrom(*source);
  }
}

void RaspiCommand::MergeFrom(const RaspiCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.RaspiCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_goal_pose_velocity()) {
    _internal_mutable_goal_pose_velocity()->::aisaacpb::Velocity::MergeFrom(from._internal_goal_pose_velocity());
  }
  if (from.has_dribble()) {
    _internal_mutable_dribble()->::aisaacpb::Dribble::MergeFrom(from._internal_dribble());
  }
  if (from.has_kick()) {
    _internal_mutable_kick()->::aisaacpb::Kick::MergeFrom(from._internal_kick());
  }
  if (from.robot_command_type() != 0) {
    _internal_set_robot_command_type(from._internal_robot_command_type());
  }
}

void RaspiCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.RaspiCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaspiCommand::CopyFrom(const RaspiCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.RaspiCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaspiCommand::IsInitialized() const {
  return true;
}

void RaspiCommand::InternalSwap(RaspiCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RaspiCommand, robot_command_type_)
      + sizeof(RaspiCommand::robot_command_type_)
      - PROTOBUF_FIELD_OFFSET(RaspiCommand, goal_pose_velocity_)>(
          reinterpret_cast<char*>(&goal_pose_velocity_),
          reinterpret_cast<char*>(&other->goal_pose_velocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RaspiCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VisionData::InitAsDefaultInstance() {
  ::aisaacpb::_VisionData_default_instance_._instance.get_mutable()->own_machine_position_ = const_cast< ::aisaacpb::Position*>(
      ::aisaacpb::Position::internal_default_instance());
  ::aisaacpb::_VisionData_default_instance_._instance.get_mutable()->ball_position_ = const_cast< ::aisaacpb::Position*>(
      ::aisaacpb::Position::internal_default_instance());
}
class VisionData::_Internal {
 public:
  static const ::aisaacpb::Position& own_machine_position(const VisionData* msg);
  static const ::aisaacpb::Position& ball_position(const VisionData* msg);
};

const ::aisaacpb::Position&
VisionData::_Internal::own_machine_position(const VisionData* msg) {
  return *msg->own_machine_position_;
}
const ::aisaacpb::Position&
VisionData::_Internal::ball_position(const VisionData* msg) {
  return *msg->ball_position_;
}
VisionData::VisionData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  obstacles_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:aisaacpb.VisionData)
}
VisionData::VisionData(const VisionData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      obstacles_(from.obstacles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_own_machine_position()) {
    own_machine_position_ = new ::aisaacpb::Position(*from.own_machine_position_);
  } else {
    own_machine_position_ = nullptr;
  }
  if (from._internal_has_ball_position()) {
    ball_position_ = new ::aisaacpb::Position(*from.ball_position_);
  } else {
    ball_position_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:aisaacpb.VisionData)
}

void VisionData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VisionData_aisaaccommand_2eproto.base);
  ::memset(&own_machine_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ball_position_) -
      reinterpret_cast<char*>(&own_machine_position_)) + sizeof(ball_position_));
}

VisionData::~VisionData() {
  // @@protoc_insertion_point(destructor:aisaacpb.VisionData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VisionData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete own_machine_position_;
  if (this != internal_default_instance()) delete ball_position_;
}

void VisionData::ArenaDtor(void* object) {
  VisionData* _this = reinterpret_cast< VisionData* >(object);
  (void)_this;
}
void VisionData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VisionData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VisionData& VisionData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VisionData_aisaaccommand_2eproto.base);
  return *internal_default_instance();
}


void VisionData::Clear() {
// @@protoc_insertion_point(message_clear_start:aisaacpb.VisionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_.Clear();
  if (GetArena() == nullptr && own_machine_position_ != nullptr) {
    delete own_machine_position_;
  }
  own_machine_position_ = nullptr;
  if (GetArena() == nullptr && ball_position_ != nullptr) {
    delete ball_position_;
  }
  ball_position_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VisionData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .aisaacpb.Position own_machine_position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_own_machine_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .aisaacpb.Position ball_position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .aisaacpb.Obstacle obstacles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VisionData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:aisaacpb.VisionData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .aisaacpb.Position own_machine_position = 1;
  if (this->has_own_machine_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::own_machine_position(this), target, stream);
  }

  // .aisaacpb.Position ball_position = 2;
  if (this->has_ball_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ball_position(this), target, stream);
  }

  // repeated .aisaacpb.Obstacle obstacles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_obstacles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_obstacles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:aisaacpb.VisionData)
  return target;
}

size_t VisionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:aisaacpb.VisionData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .aisaacpb.Obstacle obstacles = 3;
  total_size += 1UL * this->_internal_obstacles_size();
  for (const auto& msg : this->obstacles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .aisaacpb.Position own_machine_position = 1;
  if (this->has_own_machine_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *own_machine_position_);
  }

  // .aisaacpb.Position ball_position = 2;
  if (this->has_ball_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ball_position_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VisionData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:aisaacpb.VisionData)
  GOOGLE_DCHECK_NE(&from, this);
  const VisionData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VisionData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:aisaacpb.VisionData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:aisaacpb.VisionData)
    MergeFrom(*source);
  }
}

void VisionData::MergeFrom(const VisionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:aisaacpb.VisionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
  if (from.has_own_machine_position()) {
    _internal_mutable_own_machine_position()->::aisaacpb::Position::MergeFrom(from._internal_own_machine_position());
  }
  if (from.has_ball_position()) {
    _internal_mutable_ball_position()->::aisaacpb::Position::MergeFrom(from._internal_ball_position());
  }
}

void VisionData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:aisaacpb.VisionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VisionData::CopyFrom(const VisionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:aisaacpb.VisionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VisionData::IsInitialized() const {
  return true;
}

void VisionData::InternalSwap(VisionData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  obstacles_.InternalSwap(&other->obstacles_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VisionData, ball_position_)
      + sizeof(VisionData::ball_position_)
      - PROTOBUF_FIELD_OFFSET(VisionData, own_machine_position_)>(
          reinterpret_cast<char*>(&own_machine_position_),
          reinterpret_cast<char*>(&other->own_machine_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VisionData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace aisaacpb
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::aisaacpb::Position* Arena::CreateMaybeMessage< ::aisaacpb::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aisaacpb::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::aisaacpb::Velocity* Arena::CreateMaybeMessage< ::aisaacpb::Velocity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aisaacpb::Velocity >(arena);
}
template<> PROTOBUF_NOINLINE ::aisaacpb::Acceleration* Arena::CreateMaybeMessage< ::aisaacpb::Acceleration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aisaacpb::Acceleration >(arena);
}
template<> PROTOBUF_NOINLINE ::aisaacpb::Obstacle* Arena::CreateMaybeMessage< ::aisaacpb::Obstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aisaacpb::Obstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::aisaacpb::Kick* Arena::CreateMaybeMessage< ::aisaacpb::Kick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aisaacpb::Kick >(arena);
}
template<> PROTOBUF_NOINLINE ::aisaacpb::Dribble* Arena::CreateMaybeMessage< ::aisaacpb::Dribble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aisaacpb::Dribble >(arena);
}
template<> PROTOBUF_NOINLINE ::aisaacpb::SpcCommand* Arena::CreateMaybeMessage< ::aisaacpb::SpcCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aisaacpb::SpcCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::aisaacpb::RaspiCommand* Arena::CreateMaybeMessage< ::aisaacpb::RaspiCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aisaacpb::RaspiCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::aisaacpb::VisionData* Arena::CreateMaybeMessage< ::aisaacpb::VisionData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::aisaacpb::VisionData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
