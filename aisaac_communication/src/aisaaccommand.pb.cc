// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: aisaaccommand.proto

#include "aisaaccommand.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_aisaaccommand_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_aisaaccommand_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Kick;
}  // namespace protobuf_aisaaccommand_2eproto
class KickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Kick>
      _instance;
} _Kick_default_instance_;
class AIsaacCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AIsaacCommand>
      _instance;
} _AIsaacCommand_default_instance_;
namespace protobuf_aisaaccommand_2eproto {
static void InitDefaultsKick() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Kick_default_instance_;
    new (ptr) ::Kick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Kick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Kick =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKick}, {}};

static void InitDefaultsAIsaacCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_AIsaacCommand_default_instance_;
    new (ptr) ::AIsaacCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AIsaacCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AIsaacCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAIsaacCommand}, {
      &protobuf_aisaaccommand_2eproto::scc_info_Kick.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Kick.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AIsaacCommand.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kick, sensor_use_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kick, kick_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Kick, kick_strength_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AIsaacCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AIsaacCommand, robot_command_coordinate_system_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AIsaacCommand, target_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AIsaacCommand, target_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AIsaacCommand, target_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AIsaacCommand, vision_data_valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AIsaacCommand, current_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AIsaacCommand, current_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AIsaacCommand, current_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::AIsaacCommand, kick_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Kick)},
  { 8, -1, sizeof(::AIsaacCommand)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_Kick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_AIsaacCommand_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "aisaaccommand.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023aisaaccommand.proto\"I\n\004Kick\022\027\n\017sensor_"
      "use_type\030\001 \001(\005\022\021\n\tkick_type\030\002 \001(\010\022\025\n\rkic"
      "k_strength\030\003 \001(\005\"\344\001\n\rAIsaacCommand\022,\n$ro"
      "bot_command_coordinate_system_type\030\001 \001(\005"
      "\022\020\n\010target_x\030\002 \001(\005\022\020\n\010target_y\030\003 \001(\005\022\024\n\014"
      "target_angle\030\004 \001(\005\022\031\n\021vision_data_valid\030"
      "\005 \001(\010\022\021\n\tcurrent_x\030\006 \001(\005\022\021\n\tcurrent_y\030\007 "
      "\001(\005\022\025\n\rcurrent_angle\030\010 \001(\005\022\023\n\004kick\030\t \001(\013"
      "2\005.Kickb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 335);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "aisaaccommand.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_aisaaccommand_2eproto

// ===================================================================

void Kick::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Kick::kSensorUseTypeFieldNumber;
const int Kick::kKickTypeFieldNumber;
const int Kick::kKickStrengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Kick::Kick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_aisaaccommand_2eproto::scc_info_Kick.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:Kick)
}
Kick::Kick(const Kick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sensor_use_type_, &from.sensor_use_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&kick_strength_) -
    reinterpret_cast<char*>(&sensor_use_type_)) + sizeof(kick_strength_));
  // @@protoc_insertion_point(copy_constructor:Kick)
}

void Kick::SharedCtor() {
  ::memset(&sensor_use_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kick_strength_) -
      reinterpret_cast<char*>(&sensor_use_type_)) + sizeof(kick_strength_));
}

Kick::~Kick() {
  // @@protoc_insertion_point(destructor:Kick)
  SharedDtor();
}

void Kick::SharedDtor() {
}

void Kick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Kick::descriptor() {
  ::protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Kick& Kick::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_aisaaccommand_2eproto::scc_info_Kick.base);
  return *internal_default_instance();
}


void Kick::Clear() {
// @@protoc_insertion_point(message_clear_start:Kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&sensor_use_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&kick_strength_) -
      reinterpret_cast<char*>(&sensor_use_type_)) + sizeof(kick_strength_));
  _internal_metadata_.Clear();
}

bool Kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Kick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sensor_use_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sensor_use_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool kick_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &kick_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 kick_strength = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kick_strength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Kick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Kick)
  return false;
#undef DO_
}

void Kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sensor_use_type = 1;
  if (this->sensor_use_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sensor_use_type(), output);
  }

  // bool kick_type = 2;
  if (this->kick_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->kick_type(), output);
  }

  // int32 kick_strength = 3;
  if (this->kick_strength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->kick_strength(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Kick)
}

::google::protobuf::uint8* Kick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sensor_use_type = 1;
  if (this->sensor_use_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sensor_use_type(), target);
  }

  // bool kick_type = 2;
  if (this->kick_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->kick_type(), target);
  }

  // int32 kick_strength = 3;
  if (this->kick_strength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->kick_strength(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Kick)
  return target;
}

size_t Kick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Kick)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 sensor_use_type = 1;
  if (this->sensor_use_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sensor_use_type());
  }

  // bool kick_type = 2;
  if (this->kick_type() != 0) {
    total_size += 1 + 1;
  }

  // int32 kick_strength = 3;
  if (this->kick_strength() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kick_strength());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Kick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Kick)
  GOOGLE_DCHECK_NE(&from, this);
  const Kick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Kick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Kick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Kick)
    MergeFrom(*source);
  }
}

void Kick::MergeFrom(const Kick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Kick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sensor_use_type() != 0) {
    set_sensor_use_type(from.sensor_use_type());
  }
  if (from.kick_type() != 0) {
    set_kick_type(from.kick_type());
  }
  if (from.kick_strength() != 0) {
    set_kick_strength(from.kick_strength());
  }
}

void Kick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Kick::CopyFrom(const Kick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Kick::IsInitialized() const {
  return true;
}

void Kick::Swap(Kick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Kick::InternalSwap(Kick* other) {
  using std::swap;
  swap(sensor_use_type_, other->sensor_use_type_);
  swap(kick_type_, other->kick_type_);
  swap(kick_strength_, other->kick_strength_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Kick::GetMetadata() const {
  protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AIsaacCommand::InitAsDefaultInstance() {
  ::_AIsaacCommand_default_instance_._instance.get_mutable()->kick_ = const_cast< ::Kick*>(
      ::Kick::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AIsaacCommand::kRobotCommandCoordinateSystemTypeFieldNumber;
const int AIsaacCommand::kTargetXFieldNumber;
const int AIsaacCommand::kTargetYFieldNumber;
const int AIsaacCommand::kTargetAngleFieldNumber;
const int AIsaacCommand::kVisionDataValidFieldNumber;
const int AIsaacCommand::kCurrentXFieldNumber;
const int AIsaacCommand::kCurrentYFieldNumber;
const int AIsaacCommand::kCurrentAngleFieldNumber;
const int AIsaacCommand::kKickFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AIsaacCommand::AIsaacCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_aisaaccommand_2eproto::scc_info_AIsaacCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:AIsaacCommand)
}
AIsaacCommand::AIsaacCommand(const AIsaacCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_kick()) {
    kick_ = new ::Kick(*from.kick_);
  } else {
    kick_ = NULL;
  }
  ::memcpy(&robot_command_coordinate_system_type_, &from.robot_command_coordinate_system_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_angle_) -
    reinterpret_cast<char*>(&robot_command_coordinate_system_type_)) + sizeof(current_angle_));
  // @@protoc_insertion_point(copy_constructor:AIsaacCommand)
}

void AIsaacCommand::SharedCtor() {
  ::memset(&kick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_angle_) -
      reinterpret_cast<char*>(&kick_)) + sizeof(current_angle_));
}

AIsaacCommand::~AIsaacCommand() {
  // @@protoc_insertion_point(destructor:AIsaacCommand)
  SharedDtor();
}

void AIsaacCommand::SharedDtor() {
  if (this != internal_default_instance()) delete kick_;
}

void AIsaacCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AIsaacCommand::descriptor() {
  ::protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AIsaacCommand& AIsaacCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_aisaaccommand_2eproto::scc_info_AIsaacCommand.base);
  return *internal_default_instance();
}


void AIsaacCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:AIsaacCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && kick_ != NULL) {
    delete kick_;
  }
  kick_ = NULL;
  ::memset(&robot_command_coordinate_system_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_angle_) -
      reinterpret_cast<char*>(&robot_command_coordinate_system_type_)) + sizeof(current_angle_));
  _internal_metadata_.Clear();
}

bool AIsaacCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:AIsaacCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 robot_command_coordinate_system_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_command_coordinate_system_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 target_x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 target_y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 target_angle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool vision_data_valid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &vision_data_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 current_angle = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &current_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .Kick kick = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_kick()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:AIsaacCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:AIsaacCommand)
  return false;
#undef DO_
}

void AIsaacCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:AIsaacCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 robot_command_coordinate_system_type = 1;
  if (this->robot_command_coordinate_system_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->robot_command_coordinate_system_type(), output);
  }

  // int32 target_x = 2;
  if (this->target_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->target_x(), output);
  }

  // int32 target_y = 3;
  if (this->target_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target_y(), output);
  }

  // int32 target_angle = 4;
  if (this->target_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->target_angle(), output);
  }

  // bool vision_data_valid = 5;
  if (this->vision_data_valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->vision_data_valid(), output);
  }

  // int32 current_x = 6;
  if (this->current_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->current_x(), output);
  }

  // int32 current_y = 7;
  if (this->current_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->current_y(), output);
  }

  // int32 current_angle = 8;
  if (this->current_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->current_angle(), output);
  }

  // .Kick kick = 9;
  if (this->has_kick()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_kick(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:AIsaacCommand)
}

::google::protobuf::uint8* AIsaacCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:AIsaacCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 robot_command_coordinate_system_type = 1;
  if (this->robot_command_coordinate_system_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->robot_command_coordinate_system_type(), target);
  }

  // int32 target_x = 2;
  if (this->target_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->target_x(), target);
  }

  // int32 target_y = 3;
  if (this->target_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target_y(), target);
  }

  // int32 target_angle = 4;
  if (this->target_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->target_angle(), target);
  }

  // bool vision_data_valid = 5;
  if (this->vision_data_valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->vision_data_valid(), target);
  }

  // int32 current_x = 6;
  if (this->current_x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->current_x(), target);
  }

  // int32 current_y = 7;
  if (this->current_y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->current_y(), target);
  }

  // int32 current_angle = 8;
  if (this->current_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->current_angle(), target);
  }

  // .Kick kick = 9;
  if (this->has_kick()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_kick(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AIsaacCommand)
  return target;
}

size_t AIsaacCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AIsaacCommand)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Kick kick = 9;
  if (this->has_kick()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *kick_);
  }

  // int32 robot_command_coordinate_system_type = 1;
  if (this->robot_command_coordinate_system_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->robot_command_coordinate_system_type());
  }

  // int32 target_x = 2;
  if (this->target_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_x());
  }

  // int32 target_y = 3;
  if (this->target_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_y());
  }

  // int32 target_angle = 4;
  if (this->target_angle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->target_angle());
  }

  // bool vision_data_valid = 5;
  if (this->vision_data_valid() != 0) {
    total_size += 1 + 1;
  }

  // int32 current_x = 6;
  if (this->current_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_x());
  }

  // int32 current_y = 7;
  if (this->current_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_y());
  }

  // int32 current_angle = 8;
  if (this->current_angle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->current_angle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AIsaacCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AIsaacCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const AIsaacCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AIsaacCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AIsaacCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AIsaacCommand)
    MergeFrom(*source);
  }
}

void AIsaacCommand::MergeFrom(const AIsaacCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AIsaacCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_kick()) {
    mutable_kick()->::Kick::MergeFrom(from.kick());
  }
  if (from.robot_command_coordinate_system_type() != 0) {
    set_robot_command_coordinate_system_type(from.robot_command_coordinate_system_type());
  }
  if (from.target_x() != 0) {
    set_target_x(from.target_x());
  }
  if (from.target_y() != 0) {
    set_target_y(from.target_y());
  }
  if (from.target_angle() != 0) {
    set_target_angle(from.target_angle());
  }
  if (from.vision_data_valid() != 0) {
    set_vision_data_valid(from.vision_data_valid());
  }
  if (from.current_x() != 0) {
    set_current_x(from.current_x());
  }
  if (from.current_y() != 0) {
    set_current_y(from.current_y());
  }
  if (from.current_angle() != 0) {
    set_current_angle(from.current_angle());
  }
}

void AIsaacCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AIsaacCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIsaacCommand::CopyFrom(const AIsaacCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AIsaacCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIsaacCommand::IsInitialized() const {
  return true;
}

void AIsaacCommand::Swap(AIsaacCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AIsaacCommand::InternalSwap(AIsaacCommand* other) {
  using std::swap;
  swap(kick_, other->kick_);
  swap(robot_command_coordinate_system_type_, other->robot_command_coordinate_system_type_);
  swap(target_x_, other->target_x_);
  swap(target_y_, other->target_y_);
  swap(target_angle_, other->target_angle_);
  swap(vision_data_valid_, other->vision_data_valid_);
  swap(current_x_, other->current_x_);
  swap(current_y_, other->current_y_);
  swap(current_angle_, other->current_angle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AIsaacCommand::GetMetadata() const {
  protobuf_aisaaccommand_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_aisaaccommand_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::Kick* Arena::CreateMaybeMessage< ::Kick >(Arena* arena) {
  return Arena::CreateInternal< ::Kick >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::AIsaacCommand* Arena::CreateMaybeMessage< ::AIsaacCommand >(Arena* arena) {
  return Arena::CreateInternal< ::AIsaacCommand >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
